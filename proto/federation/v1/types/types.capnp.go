// Code generated by capnpc-go. DO NOT EDIT.

package types

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type JsonValue capnp.Struct
type JsonValue_Which uint16

const (
	JsonValue_Which_null    JsonValue_Which = 0
	JsonValue_Which_boolean JsonValue_Which = 1
	JsonValue_Which_number  JsonValue_Which = 2
	JsonValue_Which_string_ JsonValue_Which = 3
	JsonValue_Which_array   JsonValue_Which = 4
	JsonValue_Which_object  JsonValue_Which = 5
	JsonValue_Which_call    JsonValue_Which = 6
)

func (w JsonValue_Which) String() string {
	const s = "nullbooleannumberstring_arrayobjectcall"
	switch w {
	case JsonValue_Which_null:
		return s[0:4]
	case JsonValue_Which_boolean:
		return s[4:11]
	case JsonValue_Which_number:
		return s[11:17]
	case JsonValue_Which_string_:
		return s[17:24]
	case JsonValue_Which_array:
		return s[24:29]
	case JsonValue_Which_object:
		return s[29:35]
	case JsonValue_Which_call:
		return s[35:39]

	}
	return "JsonValue_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// JsonValue_TypeID is the unique identifier for the type JsonValue.
const JsonValue_TypeID = 0xb646fc9bdea8828e

func NewJsonValue(s *capnp.Segment) (JsonValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return JsonValue(st), err
}

func NewRootJsonValue(s *capnp.Segment) (JsonValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return JsonValue(st), err
}

func ReadRootJsonValue(msg *capnp.Message) (JsonValue, error) {
	root, err := msg.Root()
	return JsonValue(root.Struct()), err
}

func (s JsonValue) String() string {
	str, _ := text.Marshal(0xb646fc9bdea8828e, capnp.Struct(s))
	return str
}

func (s JsonValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JsonValue) DecodeFromPtr(p capnp.Ptr) JsonValue {
	return JsonValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JsonValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s JsonValue) Which() JsonValue_Which {
	return JsonValue_Which(capnp.Struct(s).Uint16(0))
}
func (s JsonValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JsonValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JsonValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JsonValue) SetNull() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s JsonValue) Boolean() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != boolean")
	}
	return capnp.Struct(s).Bit(16)
}

func (s JsonValue) SetBoolean(v bool) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetBit(16, v)
}

func (s JsonValue) Number() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != number")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s JsonValue) SetNumber(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s JsonValue) String_() (string, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != string_")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JsonValue) HasString_() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue) String_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue) SetString_(v string) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetText(0, v)
}

func (s JsonValue) Array() (JsonValue_List, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != array")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JsonValue_List(p.List()), err
}

func (s JsonValue) HasArray() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue) SetArray(v JsonValue_List) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArray sets the array field to a newly
// allocated JsonValue_List, preferring placement in s's segment.
func (s JsonValue) NewArray(n int32) (JsonValue_List, error) {
	capnp.Struct(s).SetUint16(0, 4)
	l, err := NewJsonValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JsonValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JsonValue) Object() (JsonValue_Field_List, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != object")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JsonValue_Field_List(p.List()), err
}

func (s JsonValue) HasObject() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue) SetObject(v JsonValue_Field_List) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObject sets the object field to a newly
// allocated JsonValue_Field_List, preferring placement in s's segment.
func (s JsonValue) NewObject(n int32) (JsonValue_Field_List, error) {
	capnp.Struct(s).SetUint16(0, 5)
	l, err := NewJsonValue_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JsonValue_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JsonValue) Call() (JsonValue_Call, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != call")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JsonValue_Call(p.Struct()), err
}

func (s JsonValue) HasCall() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue) SetCall(v JsonValue_Call) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCall sets the call field to a newly
// allocated JsonValue_Call struct, preferring placement in s's segment.
func (s JsonValue) NewCall() (JsonValue_Call, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewJsonValue_Call(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue_Call{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JsonValue_List is a list of JsonValue.
type JsonValue_List = capnp.StructList[JsonValue]

// NewJsonValue creates a new list of JsonValue.
func NewJsonValue_List(s *capnp.Segment, sz int32) (JsonValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[JsonValue](l), err
}

// JsonValue_Future is a wrapper for a JsonValue promised by a client call.
type JsonValue_Future struct{ *capnp.Future }

func (f JsonValue_Future) Struct() (JsonValue, error) {
	p, err := f.Future.Ptr()
	return JsonValue(p.Struct()), err
}
func (p JsonValue_Future) Call() JsonValue_Call_Future {
	return JsonValue_Call_Future{Future: p.Future.Field(0, nil)}
}

type JsonValue_Field capnp.Struct

// JsonValue_Field_TypeID is the unique identifier for the type JsonValue_Field.
const JsonValue_Field_TypeID = 0x99d8d8a8f49ec4f6

func NewJsonValue_Field(s *capnp.Segment) (JsonValue_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Field(st), err
}

func NewRootJsonValue_Field(s *capnp.Segment) (JsonValue_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Field(st), err
}

func ReadRootJsonValue_Field(msg *capnp.Message) (JsonValue_Field, error) {
	root, err := msg.Root()
	return JsonValue_Field(root.Struct()), err
}

func (s JsonValue_Field) String() string {
	str, _ := text.Marshal(0x99d8d8a8f49ec4f6, capnp.Struct(s))
	return str
}

func (s JsonValue_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JsonValue_Field) DecodeFromPtr(p capnp.Ptr) JsonValue_Field {
	return JsonValue_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JsonValue_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JsonValue_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JsonValue_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JsonValue_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JsonValue_Field) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JsonValue_Field) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue_Field) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue_Field) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JsonValue_Field) Value() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return JsonValue(p.Struct()), err
}

func (s JsonValue_Field) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JsonValue_Field) SetValue(v JsonValue) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s JsonValue_Field) NewValue() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JsonValue_Field_List is a list of JsonValue_Field.
type JsonValue_Field_List = capnp.StructList[JsonValue_Field]

// NewJsonValue_Field creates a new list of JsonValue_Field.
func NewJsonValue_Field_List(s *capnp.Segment, sz int32) (JsonValue_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JsonValue_Field](l), err
}

// JsonValue_Field_Future is a wrapper for a JsonValue_Field promised by a client call.
type JsonValue_Field_Future struct{ *capnp.Future }

func (f JsonValue_Field_Future) Struct() (JsonValue_Field, error) {
	p, err := f.Future.Ptr()
	return JsonValue_Field(p.Struct()), err
}
func (p JsonValue_Field_Future) Value() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(1, nil)}
}

type JsonValue_Call capnp.Struct

// JsonValue_Call_TypeID is the unique identifier for the type JsonValue_Call.
const JsonValue_Call_TypeID = 0x8c72e334d0537d39

func NewJsonValue_Call(s *capnp.Segment) (JsonValue_Call, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Call(st), err
}

func NewRootJsonValue_Call(s *capnp.Segment) (JsonValue_Call, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JsonValue_Call(st), err
}

func ReadRootJsonValue_Call(msg *capnp.Message) (JsonValue_Call, error) {
	root, err := msg.Root()
	return JsonValue_Call(root.Struct()), err
}

func (s JsonValue_Call) String() string {
	str, _ := text.Marshal(0x8c72e334d0537d39, capnp.Struct(s))
	return str
}

func (s JsonValue_Call) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JsonValue_Call) DecodeFromPtr(p capnp.Ptr) JsonValue_Call {
	return JsonValue_Call(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JsonValue_Call) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JsonValue_Call) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JsonValue_Call) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JsonValue_Call) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JsonValue_Call) Function() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JsonValue_Call) HasFunction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JsonValue_Call) FunctionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JsonValue_Call) SetFunction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JsonValue_Call) Params() (JsonValue_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return JsonValue_List(p.List()), err
}

func (s JsonValue_Call) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JsonValue_Call) SetParams(v JsonValue_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated JsonValue_List, preferring placement in s's segment.
func (s JsonValue_Call) NewParams(n int32) (JsonValue_List, error) {
	l, err := NewJsonValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JsonValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// JsonValue_Call_List is a list of JsonValue_Call.
type JsonValue_Call_List = capnp.StructList[JsonValue_Call]

// NewJsonValue_Call creates a new list of JsonValue_Call.
func NewJsonValue_Call_List(s *capnp.Segment, sz int32) (JsonValue_Call_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JsonValue_Call](l), err
}

// JsonValue_Call_Future is a wrapper for a JsonValue_Call promised by a client call.
type JsonValue_Call_Future struct{ *capnp.Future }

func (f JsonValue_Call_Future) Struct() (JsonValue_Call, error) {
	p, err := f.Future.Ptr()
	return JsonValue_Call(p.Struct()), err
}

type Map capnp.Struct

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xaa771e93a5bfc713

func NewMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func NewRootMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func ReadRootMap(msg *capnp.Message) (Map, error) {
	root, err := msg.Root()
	return Map(root.Struct()), err
}

func (s Map) String() string {
	str, _ := text.Marshal(0xaa771e93a5bfc713, capnp.Struct(s))
	return str
}

func (s Map) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map) DecodeFromPtr(p capnp.Ptr) Map {
	return Map(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map) Entries() (Map_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Map_Entry_List(p.List()), err
}

func (s Map) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map) SetEntries(v Map_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Map_Entry_List, preferring placement in s's segment.
func (s Map) NewEntries(n int32) (Map_Entry_List, error) {
	l, err := NewMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Map_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Map_List is a list of Map.
type Map_List = capnp.StructList[Map]

// NewMap creates a new list of Map.
func NewMap_List(s *capnp.Segment, sz int32) (Map_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map](l), err
}

// Map_Future is a wrapper for a Map promised by a client call.
type Map_Future struct{ *capnp.Future }

func (f Map_Future) Struct() (Map, error) {
	p, err := f.Future.Ptr()
	return Map(p.Struct()), err
}

type Map_Entry capnp.Struct

// Map_Entry_TypeID is the unique identifier for the type Map_Entry.
const Map_Entry_TypeID = 0xb000b19244fa63f4

func NewMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func NewRootMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func ReadRootMap_Entry(msg *capnp.Message) (Map_Entry, error) {
	root, err := msg.Root()
	return Map_Entry(root.Struct()), err
}

func (s Map_Entry) String() string {
	str, _ := text.Marshal(0xb000b19244fa63f4, capnp.Struct(s))
	return str
}

func (s Map_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map_Entry) DecodeFromPtr(p capnp.Ptr) Map_Entry {
	return Map_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map_Entry) Key() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Map_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map_Entry) SetKey(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Map_Entry) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Map_Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Map_Entry) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Map_Entry_List is a list of Map_Entry.
type Map_Entry_List = capnp.StructList[Map_Entry]

// NewMap_Entry creates a new list of Map_Entry.
func NewMap_Entry_List(s *capnp.Segment, sz int32) (Map_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Map_Entry](l), err
}

// Map_Entry_Future is a wrapper for a Map_Entry promised by a client call.
type Map_Entry_Future struct{ *capnp.Future }

func (f Map_Entry_Future) Struct() (Map_Entry, error) {
	p, err := f.Future.Ptr()
	return Map_Entry(p.Struct()), err
}
func (p Map_Entry_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Map_Entry_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Signature capnp.Struct

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xbe04b152eaffa6c8

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Signature(st), err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Signature(st), err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.Root()
	return Signature(root.Struct()), err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xbe04b152eaffa6c8, capnp.Struct(s))
	return str
}

func (s Signature) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signature) DecodeFromPtr(p capnp.Ptr) Signature {
	return Signature(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signature) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signature) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signature) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signature) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signature) Server() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Signature) HasServer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signature) ServerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Signature) SetServer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Signature) Signatures() (Map, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Map(p.Struct()), err
}

func (s Signature) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Signature) SetSignatures(v Map) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Signature) NewSignatures() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Signature_List is a list of Signature.
type Signature_List = capnp.StructList[Signature]

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Signature](l), err
}

// Signature_Future is a wrapper for a Signature promised by a client call.
type Signature_Future struct{ *capnp.Future }

func (f Signature_Future) Struct() (Signature, error) {
	p, err := f.Future.Ptr()
	return Signature(p.Struct()), err
}
func (p Signature_Future) Signatures() Map_Future {
	return Map_Future{Future: p.Future.Field(1, nil)}
}

type AuthData capnp.Struct

// AuthData_TypeID is the unique identifier for the type AuthData.
const AuthData_TypeID = 0xd9a283298fbeb191

func NewAuthData(s *capnp.Segment) (AuthData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return AuthData(st), err
}

func NewRootAuthData(s *capnp.Segment) (AuthData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return AuthData(st), err
}

func ReadRootAuthData(msg *capnp.Message) (AuthData, error) {
	root, err := msg.Root()
	return AuthData(root.Struct()), err
}

func (s AuthData) String() string {
	str, _ := text.Marshal(0xd9a283298fbeb191, capnp.Struct(s))
	return str
}

func (s AuthData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthData) DecodeFromPtr(p capnp.Ptr) AuthData {
	return AuthData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthData) Method() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s AuthData) SetMethod(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s AuthData) Origin() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AuthData) HasOrigin() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AuthData) OriginBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AuthData) SetOrigin(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AuthData) Destination() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AuthData) HasDestination() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AuthData) DestinationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AuthData) SetDestination(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s AuthData) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Signature_List(p.List()), err
}

func (s AuthData) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AuthData) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AuthData) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// AuthData_List is a list of AuthData.
type AuthData_List = capnp.StructList[AuthData]

// NewAuthData creates a new list of AuthData.
func NewAuthData_List(s *capnp.Segment, sz int32) (AuthData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[AuthData](l), err
}

// AuthData_Future is a wrapper for a AuthData promised by a client call.
type AuthData_Future struct{ *capnp.Future }

func (f AuthData_Future) Struct() (AuthData, error) {
	p, err := f.Future.Ptr()
	return AuthData(p.Struct()), err
}

type ServerVersion capnp.Struct

// ServerVersion_TypeID is the unique identifier for the type ServerVersion.
const ServerVersion_TypeID = 0xe833d93baba2deb6

func NewServerVersion(s *capnp.Segment) (ServerVersion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServerVersion(st), err
}

func NewRootServerVersion(s *capnp.Segment) (ServerVersion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServerVersion(st), err
}

func ReadRootServerVersion(msg *capnp.Message) (ServerVersion, error) {
	root, err := msg.Root()
	return ServerVersion(root.Struct()), err
}

func (s ServerVersion) String() string {
	str, _ := text.Marshal(0xe833d93baba2deb6, capnp.Struct(s))
	return str
}

func (s ServerVersion) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerVersion) DecodeFromPtr(p capnp.Ptr) ServerVersion {
	return ServerVersion(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerVersion) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerVersion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerVersion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerVersion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerVersion) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServerVersion) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerVersion) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServerVersion) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServerVersion) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ServerVersion) HasVersion() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerVersion) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ServerVersion) SetVersion(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ServerVersion_List is a list of ServerVersion.
type ServerVersion_List = capnp.StructList[ServerVersion]

// NewServerVersion creates a new list of ServerVersion.
func NewServerVersion_List(s *capnp.Segment, sz int32) (ServerVersion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ServerVersion](l), err
}

// ServerVersion_Future is a wrapper for a ServerVersion promised by a client call.
type ServerVersion_Future struct{ *capnp.Future }

func (f ServerVersion_Future) Struct() (ServerVersion, error) {
	p, err := f.Future.Ptr()
	return ServerVersion(p.Struct()), err
}

type QueryCriteria capnp.Struct

// QueryCriteria_TypeID is the unique identifier for the type QueryCriteria.
const QueryCriteria_TypeID = 0xbbc6594b64ec5041

func NewQueryCriteria(s *capnp.Segment) (QueryCriteria, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QueryCriteria(st), err
}

func NewRootQueryCriteria(s *capnp.Segment) (QueryCriteria, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QueryCriteria(st), err
}

func ReadRootQueryCriteria(msg *capnp.Message) (QueryCriteria, error) {
	root, err := msg.Root()
	return QueryCriteria(root.Struct()), err
}

func (s QueryCriteria) String() string {
	str, _ := text.Marshal(0xbbc6594b64ec5041, capnp.Struct(s))
	return str
}

func (s QueryCriteria) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QueryCriteria) DecodeFromPtr(p capnp.Ptr) QueryCriteria {
	return QueryCriteria(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QueryCriteria) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QueryCriteria) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QueryCriteria) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QueryCriteria) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QueryCriteria) MinimumValidUntilTS() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s QueryCriteria) SetMinimumValidUntilTS(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// QueryCriteria_List is a list of QueryCriteria.
type QueryCriteria_List = capnp.StructList[QueryCriteria]

// NewQueryCriteria creates a new list of QueryCriteria.
func NewQueryCriteria_List(s *capnp.Segment, sz int32) (QueryCriteria_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[QueryCriteria](l), err
}

// QueryCriteria_Future is a wrapper for a QueryCriteria promised by a client call.
type QueryCriteria_Future struct{ *capnp.Future }

func (f QueryCriteria_Future) Struct() (QueryCriteria, error) {
	p, err := f.Future.Ptr()
	return QueryCriteria(p.Struct()), err
}

type ServerKeysResponse capnp.Struct
type ServerKeysResponse_Which uint16

const (
	ServerKeysResponse_Which_metadata      ServerKeysResponse_Which = 0
	ServerKeysResponse_Which_verifyKeys    ServerKeysResponse_Which = 1
	ServerKeysResponse_Which_oldVerifyKeys ServerKeysResponse_Which = 2
)

func (w ServerKeysResponse_Which) String() string {
	const s = "metadataverifyKeysoldVerifyKeys"
	switch w {
	case ServerKeysResponse_Which_metadata:
		return s[0:8]
	case ServerKeysResponse_Which_verifyKeys:
		return s[8:18]
	case ServerKeysResponse_Which_oldVerifyKeys:
		return s[18:31]

	}
	return "ServerKeysResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ServerKeysResponse_TypeID is the unique identifier for the type ServerKeysResponse.
const ServerKeysResponse_TypeID = 0x91bc94026aa73194

func NewServerKeysResponse(s *capnp.Segment) (ServerKeysResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ServerKeysResponse(st), err
}

func NewRootServerKeysResponse(s *capnp.Segment) (ServerKeysResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ServerKeysResponse(st), err
}

func ReadRootServerKeysResponse(msg *capnp.Message) (ServerKeysResponse, error) {
	root, err := msg.Root()
	return ServerKeysResponse(root.Struct()), err
}

func (s ServerKeysResponse) String() string {
	str, _ := text.Marshal(0x91bc94026aa73194, capnp.Struct(s))
	return str
}

func (s ServerKeysResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerKeysResponse) DecodeFromPtr(p capnp.Ptr) ServerKeysResponse {
	return ServerKeysResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerKeysResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ServerKeysResponse) Which() ServerKeysResponse_Which {
	return ServerKeysResponse_Which(capnp.Struct(s).Uint16(0))
}
func (s ServerKeysResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerKeysResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerKeysResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerKeysResponse) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Signature_List(p.List()), err
}

func (s ServerKeysResponse) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerKeysResponse) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ServerKeysResponse) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ServerKeysResponse) Metadata() (ServerKeysResponse_Metadata, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != metadata")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return ServerKeysResponse_Metadata(p.Struct()), err
}

func (s ServerKeysResponse) HasMetadata() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerKeysResponse) SetMetadata(v ServerKeysResponse_Metadata) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated ServerKeysResponse_Metadata struct, preferring placement in s's segment.
func (s ServerKeysResponse) NewMetadata() (ServerKeysResponse_Metadata, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewServerKeysResponse_Metadata(capnp.Struct(s).Segment())
	if err != nil {
		return ServerKeysResponse_Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerKeysResponse) VerifyKeys() (Map, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != verifyKeys")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return Map(p.Struct()), err
}

func (s ServerKeysResponse) HasVerifyKeys() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerKeysResponse) SetVerifyKeys(v Map) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVerifyKeys sets the verifyKeys field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s ServerKeysResponse) NewVerifyKeys() (Map, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ServerKeysResponse) OldVerifyKeys() (Map, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != oldVerifyKeys")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return Map(p.Struct()), err
}

func (s ServerKeysResponse) HasOldVerifyKeys() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s ServerKeysResponse) SetOldVerifyKeys(v Map) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewOldVerifyKeys sets the oldVerifyKeys field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s ServerKeysResponse) NewOldVerifyKeys() (Map, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerKeysResponse_List is a list of ServerKeysResponse.
type ServerKeysResponse_List = capnp.StructList[ServerKeysResponse]

// NewServerKeysResponse creates a new list of ServerKeysResponse.
func NewServerKeysResponse_List(s *capnp.Segment, sz int32) (ServerKeysResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ServerKeysResponse](l), err
}

// ServerKeysResponse_Future is a wrapper for a ServerKeysResponse promised by a client call.
type ServerKeysResponse_Future struct{ *capnp.Future }

func (f ServerKeysResponse_Future) Struct() (ServerKeysResponse, error) {
	p, err := f.Future.Ptr()
	return ServerKeysResponse(p.Struct()), err
}
func (p ServerKeysResponse_Future) Metadata() ServerKeysResponse_Metadata_Future {
	return ServerKeysResponse_Metadata_Future{Future: p.Future.Field(1, nil)}
}
func (p ServerKeysResponse_Future) VerifyKeys() Map_Future {
	return Map_Future{Future: p.Future.Field(1, nil)}
}
func (p ServerKeysResponse_Future) OldVerifyKeys() Map_Future {
	return Map_Future{Future: p.Future.Field(1, nil)}
}

type ServerKeysResponse_Metadata capnp.Struct

// ServerKeysResponse_Metadata_TypeID is the unique identifier for the type ServerKeysResponse_Metadata.
const ServerKeysResponse_Metadata_TypeID = 0xc6b8d5e8d14b4b9b

func NewServerKeysResponse_Metadata(s *capnp.Segment) (ServerKeysResponse_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerKeysResponse_Metadata(st), err
}

func NewRootServerKeysResponse_Metadata(s *capnp.Segment) (ServerKeysResponse_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerKeysResponse_Metadata(st), err
}

func ReadRootServerKeysResponse_Metadata(msg *capnp.Message) (ServerKeysResponse_Metadata, error) {
	root, err := msg.Root()
	return ServerKeysResponse_Metadata(root.Struct()), err
}

func (s ServerKeysResponse_Metadata) String() string {
	str, _ := text.Marshal(0xc6b8d5e8d14b4b9b, capnp.Struct(s))
	return str
}

func (s ServerKeysResponse_Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerKeysResponse_Metadata) DecodeFromPtr(p capnp.Ptr) ServerKeysResponse_Metadata {
	return ServerKeysResponse_Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerKeysResponse_Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerKeysResponse_Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerKeysResponse_Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerKeysResponse_Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerKeysResponse_Metadata) ServerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServerKeysResponse_Metadata) HasServerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerKeysResponse_Metadata) ServerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServerKeysResponse_Metadata) SetServerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServerKeysResponse_Metadata) ValidUntilTS() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ServerKeysResponse_Metadata) SetValidUntilTS(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ServerKeysResponse_Metadata_List is a list of ServerKeysResponse_Metadata.
type ServerKeysResponse_Metadata_List = capnp.StructList[ServerKeysResponse_Metadata]

// NewServerKeysResponse_Metadata creates a new list of ServerKeysResponse_Metadata.
func NewServerKeysResponse_Metadata_List(s *capnp.Segment, sz int32) (ServerKeysResponse_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerKeysResponse_Metadata](l), err
}

// ServerKeysResponse_Metadata_Future is a wrapper for a ServerKeysResponse_Metadata promised by a client call.
type ServerKeysResponse_Metadata_Future struct{ *capnp.Future }

func (f ServerKeysResponse_Metadata_Future) Struct() (ServerKeysResponse_Metadata, error) {
	p, err := f.Future.Ptr()
	return ServerKeysResponse_Metadata(p.Struct()), err
}

type ServerKeysResponse_OldVerifyKey capnp.Struct

// ServerKeysResponse_OldVerifyKey_TypeID is the unique identifier for the type ServerKeysResponse_OldVerifyKey.
const ServerKeysResponse_OldVerifyKey_TypeID = 0x956498bd24be9c30

func NewServerKeysResponse_OldVerifyKey(s *capnp.Segment) (ServerKeysResponse_OldVerifyKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerKeysResponse_OldVerifyKey(st), err
}

func NewRootServerKeysResponse_OldVerifyKey(s *capnp.Segment) (ServerKeysResponse_OldVerifyKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServerKeysResponse_OldVerifyKey(st), err
}

func ReadRootServerKeysResponse_OldVerifyKey(msg *capnp.Message) (ServerKeysResponse_OldVerifyKey, error) {
	root, err := msg.Root()
	return ServerKeysResponse_OldVerifyKey(root.Struct()), err
}

func (s ServerKeysResponse_OldVerifyKey) String() string {
	str, _ := text.Marshal(0x956498bd24be9c30, capnp.Struct(s))
	return str
}

func (s ServerKeysResponse_OldVerifyKey) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerKeysResponse_OldVerifyKey) DecodeFromPtr(p capnp.Ptr) ServerKeysResponse_OldVerifyKey {
	return ServerKeysResponse_OldVerifyKey(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerKeysResponse_OldVerifyKey) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerKeysResponse_OldVerifyKey) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerKeysResponse_OldVerifyKey) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerKeysResponse_OldVerifyKey) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerKeysResponse_OldVerifyKey) ExpiredTS() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ServerKeysResponse_OldVerifyKey) SetExpiredTS(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s ServerKeysResponse_OldVerifyKey) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ServerKeysResponse_OldVerifyKey) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerKeysResponse_OldVerifyKey) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ServerKeysResponse_OldVerifyKey_List is a list of ServerKeysResponse_OldVerifyKey.
type ServerKeysResponse_OldVerifyKey_List = capnp.StructList[ServerKeysResponse_OldVerifyKey]

// NewServerKeysResponse_OldVerifyKey creates a new list of ServerKeysResponse_OldVerifyKey.
func NewServerKeysResponse_OldVerifyKey_List(s *capnp.Segment, sz int32) (ServerKeysResponse_OldVerifyKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ServerKeysResponse_OldVerifyKey](l), err
}

// ServerKeysResponse_OldVerifyKey_Future is a wrapper for a ServerKeysResponse_OldVerifyKey promised by a client call.
type ServerKeysResponse_OldVerifyKey_Future struct{ *capnp.Future }

func (f ServerKeysResponse_OldVerifyKey_Future) Struct() (ServerKeysResponse_OldVerifyKey, error) {
	p, err := f.Future.Ptr()
	return ServerKeysResponse_OldVerifyKey(p.Struct()), err
}

type Transaction capnp.Struct
type Transaction_Which uint16

const (
	Transaction_Which_metadata Transaction_Which = 0
	Transaction_Which_edu      Transaction_Which = 1
	Transaction_Which_pdu      Transaction_Which = 2
)

func (w Transaction_Which) String() string {
	const s = "metadataedupdu"
	switch w {
	case Transaction_Which_metadata:
		return s[0:8]
	case Transaction_Which_edu:
		return s[8:11]
	case Transaction_Which_pdu:
		return s[11:14]

	}
	return "Transaction_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0x84bc4046c477cd59

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Transaction(st), err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Transaction(st), err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.Root()
	return Transaction(root.Struct()), err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0x84bc4046c477cd59, capnp.Struct(s))
	return str
}

func (s Transaction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction) DecodeFromPtr(p capnp.Ptr) Transaction {
	return Transaction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Transaction) Which() Transaction_Which {
	return Transaction_Which(capnp.Struct(s).Uint16(0))
}
func (s Transaction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction) AuthData() (AuthData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AuthData(p.Struct()), err
}

func (s Transaction) HasAuthData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction) SetAuthData(v AuthData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuthData sets the authData field to a newly
// allocated AuthData struct, preferring placement in s's segment.
func (s Transaction) NewAuthData() (AuthData, error) {
	ss, err := NewAuthData(capnp.Struct(s).Segment())
	if err != nil {
		return AuthData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction) Metadata() (Transaction_Metadata, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != metadata")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return Transaction_Metadata(p.Struct()), err
}

func (s Transaction) HasMetadata() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction) SetMetadata(v Transaction_Metadata) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated Transaction_Metadata struct, preferring placement in s's segment.
func (s Transaction) NewMetadata() (Transaction_Metadata, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewTransaction_Metadata(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction) Edu() (Transaction_EDU, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != edu")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return Transaction_EDU(p.Struct()), err
}

func (s Transaction) HasEdu() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction) SetEdu(v Transaction_EDU) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEdu sets the edu field to a newly
// allocated Transaction_EDU struct, preferring placement in s's segment.
func (s Transaction) NewEdu() (Transaction_EDU, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTransaction_EDU(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_EDU{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction) Pdu() (Transaction_PDU, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != pdu")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return Transaction_PDU(p.Struct()), err
}

func (s Transaction) HasPdu() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction) SetPdu(v Transaction_PDU) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPdu sets the pdu field to a newly
// allocated Transaction_PDU struct, preferring placement in s's segment.
func (s Transaction) NewPdu() (Transaction_PDU, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewTransaction_PDU(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Transaction_List is a list of Transaction.
type Transaction_List = capnp.StructList[Transaction]

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Transaction](l), err
}

// Transaction_Future is a wrapper for a Transaction promised by a client call.
type Transaction_Future struct{ *capnp.Future }

func (f Transaction_Future) Struct() (Transaction, error) {
	p, err := f.Future.Ptr()
	return Transaction(p.Struct()), err
}
func (p Transaction_Future) AuthData() AuthData_Future {
	return AuthData_Future{Future: p.Future.Field(0, nil)}
}
func (p Transaction_Future) Metadata() Transaction_Metadata_Future {
	return Transaction_Metadata_Future{Future: p.Future.Field(1, nil)}
}
func (p Transaction_Future) Edu() Transaction_EDU_Future {
	return Transaction_EDU_Future{Future: p.Future.Field(1, nil)}
}
func (p Transaction_Future) Pdu() Transaction_PDU_Future {
	return Transaction_PDU_Future{Future: p.Future.Field(1, nil)}
}

type Transaction_Metadata capnp.Struct

// Transaction_Metadata_TypeID is the unique identifier for the type Transaction_Metadata.
const Transaction_Metadata_TypeID = 0xc97074bcbc8f1239

func NewTransaction_Metadata(s *capnp.Segment) (Transaction_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Transaction_Metadata(st), err
}

func NewRootTransaction_Metadata(s *capnp.Segment) (Transaction_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Transaction_Metadata(st), err
}

func ReadRootTransaction_Metadata(msg *capnp.Message) (Transaction_Metadata, error) {
	root, err := msg.Root()
	return Transaction_Metadata(root.Struct()), err
}

func (s Transaction_Metadata) String() string {
	str, _ := text.Marshal(0xc97074bcbc8f1239, capnp.Struct(s))
	return str
}

func (s Transaction_Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction_Metadata) DecodeFromPtr(p capnp.Ptr) Transaction_Metadata {
	return Transaction_Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction_Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Transaction_Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_Metadata) TxnID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_Metadata) HasTxnID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_Metadata) TxnIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_Metadata) SetTxnID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_Metadata) Origin() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_Metadata) HasOrigin() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_Metadata) OriginBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_Metadata) SetOrigin(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_Metadata) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Transaction_Metadata) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Transaction_Metadata_List is a list of Transaction_Metadata.
type Transaction_Metadata_List = capnp.StructList[Transaction_Metadata]

// NewTransaction_Metadata creates a new list of Transaction_Metadata.
func NewTransaction_Metadata_List(s *capnp.Segment, sz int32) (Transaction_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Transaction_Metadata](l), err
}

// Transaction_Metadata_Future is a wrapper for a Transaction_Metadata promised by a client call.
type Transaction_Metadata_Future struct{ *capnp.Future }

func (f Transaction_Metadata_Future) Struct() (Transaction_Metadata, error) {
	p, err := f.Future.Ptr()
	return Transaction_Metadata(p.Struct()), err
}

type Transaction_EDU capnp.Struct

// Transaction_EDU_TypeID is the unique identifier for the type Transaction_EDU.
const Transaction_EDU_TypeID = 0xa18f0aa774bf394b

func NewTransaction_EDU(s *capnp.Segment) (Transaction_EDU, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transaction_EDU(st), err
}

func NewRootTransaction_EDU(s *capnp.Segment) (Transaction_EDU, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transaction_EDU(st), err
}

func ReadRootTransaction_EDU(msg *capnp.Message) (Transaction_EDU, error) {
	root, err := msg.Root()
	return Transaction_EDU(root.Struct()), err
}

func (s Transaction_EDU) String() string {
	str, _ := text.Marshal(0xa18f0aa774bf394b, capnp.Struct(s))
	return str
}

func (s Transaction_EDU) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction_EDU) DecodeFromPtr(p capnp.Ptr) Transaction_EDU {
	return Transaction_EDU(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction_EDU) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Transaction_EDU) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_EDU) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_EDU) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_EDU) EduType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_EDU) HasEduType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_EDU) EduTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_EDU) SetEduType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_EDU) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return JsonValue(p.Struct()), err
}

func (s Transaction_EDU) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_EDU) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_EDU) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Transaction_EDU_List is a list of Transaction_EDU.
type Transaction_EDU_List = capnp.StructList[Transaction_EDU]

// NewTransaction_EDU creates a new list of Transaction_EDU.
func NewTransaction_EDU_List(s *capnp.Segment, sz int32) (Transaction_EDU_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Transaction_EDU](l), err
}

// Transaction_EDU_Future is a wrapper for a Transaction_EDU promised by a client call.
type Transaction_EDU_Future struct{ *capnp.Future }

func (f Transaction_EDU_Future) Struct() (Transaction_EDU, error) {
	p, err := f.Future.Ptr()
	return Transaction_EDU(p.Struct()), err
}
func (p Transaction_EDU_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(1, nil)}
}

type Transaction_PDU capnp.Struct
type Transaction_PDU_roomVersion1 Transaction_PDU
type Transaction_PDU_roomVersion2 Transaction_PDU
type Transaction_PDU_roomVersion3 Transaction_PDU
type Transaction_PDU_roomVersion4 Transaction_PDU
type Transaction_PDU_roomVersion5 Transaction_PDU
type Transaction_PDU_roomVersion6 Transaction_PDU
type Transaction_PDU_roomVersion7 Transaction_PDU
type Transaction_PDU_roomVersion8 Transaction_PDU
type Transaction_PDU_roomVersion9 Transaction_PDU
type Transaction_PDU_roomVersion10 Transaction_PDU
type Transaction_PDU_roomVersion11 Transaction_PDU
type Transaction_PDU_Which uint16

const (
	Transaction_PDU_Which_roomVersion1  Transaction_PDU_Which = 0
	Transaction_PDU_Which_roomVersion2  Transaction_PDU_Which = 1
	Transaction_PDU_Which_roomVersion3  Transaction_PDU_Which = 2
	Transaction_PDU_Which_roomVersion4  Transaction_PDU_Which = 3
	Transaction_PDU_Which_roomVersion5  Transaction_PDU_Which = 4
	Transaction_PDU_Which_roomVersion6  Transaction_PDU_Which = 5
	Transaction_PDU_Which_roomVersion7  Transaction_PDU_Which = 6
	Transaction_PDU_Which_roomVersion8  Transaction_PDU_Which = 7
	Transaction_PDU_Which_roomVersion9  Transaction_PDU_Which = 8
	Transaction_PDU_Which_roomVersion10 Transaction_PDU_Which = 9
	Transaction_PDU_Which_roomVersion11 Transaction_PDU_Which = 10
)

func (w Transaction_PDU_Which) String() string {
	const s = "roomVersion1roomVersion2roomVersion3roomVersion4roomVersion5roomVersion6roomVersion7roomVersion8roomVersion9roomVersion10roomVersion11"
	switch w {
	case Transaction_PDU_Which_roomVersion1:
		return s[0:12]
	case Transaction_PDU_Which_roomVersion2:
		return s[12:24]
	case Transaction_PDU_Which_roomVersion3:
		return s[24:36]
	case Transaction_PDU_Which_roomVersion4:
		return s[36:48]
	case Transaction_PDU_Which_roomVersion5:
		return s[48:60]
	case Transaction_PDU_Which_roomVersion6:
		return s[60:72]
	case Transaction_PDU_Which_roomVersion7:
		return s[72:84]
	case Transaction_PDU_Which_roomVersion8:
		return s[84:96]
	case Transaction_PDU_Which_roomVersion9:
		return s[96:108]
	case Transaction_PDU_Which_roomVersion10:
		return s[108:121]
	case Transaction_PDU_Which_roomVersion11:
		return s[121:134]

	}
	return "Transaction_PDU_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Transaction_PDU_TypeID is the unique identifier for the type Transaction_PDU.
const Transaction_PDU_TypeID = 0xb1beb572e4d306be

func NewTransaction_PDU(s *capnp.Segment) (Transaction_PDU, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 12})
	return Transaction_PDU(st), err
}

func NewRootTransaction_PDU(s *capnp.Segment) (Transaction_PDU, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 12})
	return Transaction_PDU(st), err
}

func ReadRootTransaction_PDU(msg *capnp.Message) (Transaction_PDU, error) {
	root, err := msg.Root()
	return Transaction_PDU(root.Struct()), err
}

func (s Transaction_PDU) String() string {
	str, _ := text.Marshal(0xb1beb572e4d306be, capnp.Struct(s))
	return str
}

func (s Transaction_PDU) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction_PDU) DecodeFromPtr(p capnp.Ptr) Transaction_PDU {
	return Transaction_PDU(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction_PDU) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Transaction_PDU) Which() Transaction_PDU_Which {
	return Transaction_PDU_Which(capnp.Struct(s).Uint16(16))
}
func (s Transaction_PDU) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU) RoomVersion1() Transaction_PDU_roomVersion1 {
	return Transaction_PDU_roomVersion1(s)
}

func (s Transaction_PDU) SetRoomVersion1() {
	capnp.Struct(s).SetUint16(16, 0)
}

func (s Transaction_PDU_roomVersion1) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion1) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion1) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion1) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion1) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion1) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasEventID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion1) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetEventID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion1) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion1) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion1) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion1) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion1) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasSender() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion1) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetSender(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion1) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion1) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion1) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion1) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion1) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion1) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion1) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion1) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s Transaction_PDU_roomVersion1) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion1) HasContent() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion1) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion1) AuthEvents() (Transaction_PDU_EventReference_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return Transaction_PDU_EventReference_List(p.List()), err
}

func (s Transaction_PDU_roomVersion1) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion1) SetAuthEvents(v Transaction_PDU_EventReference_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated Transaction_PDU_EventReference_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewAuthEvents(n int32) (Transaction_PDU_EventReference_List, error) {
	l, err := NewTransaction_PDU_EventReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Transaction_PDU_EventReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion1) PrevEvents() (Transaction_PDU_EventReference_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return Transaction_PDU_EventReference_List(p.List()), err
}

func (s Transaction_PDU_roomVersion1) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion1) SetPrevEvents(v Transaction_PDU_EventReference_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated Transaction_PDU_EventReference_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewPrevEvents(n int32) (Transaction_PDU_EventReference_List, error) {
	l, err := NewTransaction_PDU_EventReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Transaction_PDU_EventReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion1) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion1) HasHashes() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion1) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion1) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion1) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion1) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion1) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion1) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s Transaction_PDU_roomVersion1) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion1) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion2() Transaction_PDU_roomVersion2 {
	return Transaction_PDU_roomVersion2(s)
}

func (s Transaction_PDU) SetRoomVersion2() {
	capnp.Struct(s).SetUint16(16, 1)
}

func (s Transaction_PDU_roomVersion2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion2) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion2) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion2) EventID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasEventID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion2) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetEventID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion2) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion2) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion2) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion2) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion2) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasSender() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion2) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetSender(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion2) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion2) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion2) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion2) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion2) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion2) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion2) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion2) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s Transaction_PDU_roomVersion2) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion2) HasContent() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion2) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion2) AuthEvents() (Transaction_PDU_EventReference_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return Transaction_PDU_EventReference_List(p.List()), err
}

func (s Transaction_PDU_roomVersion2) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion2) SetAuthEvents(v Transaction_PDU_EventReference_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated Transaction_PDU_EventReference_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewAuthEvents(n int32) (Transaction_PDU_EventReference_List, error) {
	l, err := NewTransaction_PDU_EventReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Transaction_PDU_EventReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion2) PrevEvents() (Transaction_PDU_EventReference_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return Transaction_PDU_EventReference_List(p.List()), err
}

func (s Transaction_PDU_roomVersion2) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion2) SetPrevEvents(v Transaction_PDU_EventReference_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated Transaction_PDU_EventReference_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewPrevEvents(n int32) (Transaction_PDU_EventReference_List, error) {
	l, err := NewTransaction_PDU_EventReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Transaction_PDU_EventReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion2) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion2) HasHashes() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion2) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion2) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion2) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion2) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion2) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion2) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s Transaction_PDU_roomVersion2) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion2) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion3() Transaction_PDU_roomVersion3 {
	return Transaction_PDU_roomVersion3(s)
}

func (s Transaction_PDU) SetRoomVersion3() {
	capnp.Struct(s).SetUint16(16, 2)
}

func (s Transaction_PDU_roomVersion3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion3) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion3) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion3) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion3) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion3) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion3) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion3) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion3) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion3) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion3) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion3) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion3) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion3) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion3) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion3) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion3) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion3) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion3) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion3) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion3) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion3) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion3) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion3) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion3) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion3) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion3) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion3) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion3) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion3) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion3) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion3) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion3) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion3) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion3) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion3) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion3) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion3) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion3) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion3) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion3) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion3) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion3) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion3) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion4() Transaction_PDU_roomVersion4 {
	return Transaction_PDU_roomVersion4(s)
}

func (s Transaction_PDU) SetRoomVersion4() {
	capnp.Struct(s).SetUint16(16, 3)
}

func (s Transaction_PDU_roomVersion4) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion4) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion4) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion4) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion4) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion4) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion4) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion4) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion4) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion4) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion4) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion4) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion4) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion4) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion4) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion4) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion4) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion4) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion4) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion4) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion4) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion4) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion4) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion4) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion4) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion4) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion4) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion4) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion4) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion4) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion4) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion4) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion4) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion4) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion4) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion4) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion4) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion4) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion4) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion4) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion4) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion4) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion4) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion4) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion4) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion4) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion5() Transaction_PDU_roomVersion5 {
	return Transaction_PDU_roomVersion5(s)
}

func (s Transaction_PDU) SetRoomVersion5() {
	capnp.Struct(s).SetUint16(16, 4)
}

func (s Transaction_PDU_roomVersion5) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion5) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion5) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion5) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion5) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion5) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion5) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion5) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion5) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion5) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion5) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion5) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion5) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion5) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion5) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion5) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion5) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion5) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion5) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion5) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion5) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion5) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion5) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion5) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion5) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion5) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion5) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion5) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion5) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion5) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion5) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion5) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion5) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion5) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion5) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion5) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion5) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion5) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion5) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion5) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion5) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion5) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion5) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion5) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion5) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion5) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion6() Transaction_PDU_roomVersion6 {
	return Transaction_PDU_roomVersion6(s)
}

func (s Transaction_PDU) SetRoomVersion6() {
	capnp.Struct(s).SetUint16(16, 5)
}

func (s Transaction_PDU_roomVersion6) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion6) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion6) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion6) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion6) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion6) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion6) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion6) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion6) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion6) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion6) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion6) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion6) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion6) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion6) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion6) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion6) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion6) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion6) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion6) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion6) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion6) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion6) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion6) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion6) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion6) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion6) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion6) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion6) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion6) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion6) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion6) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion6) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion6) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion6) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion6) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion6) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion6) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion6) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion6) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion6) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion6) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion6) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion6) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion6) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion6) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion7() Transaction_PDU_roomVersion7 {
	return Transaction_PDU_roomVersion7(s)
}

func (s Transaction_PDU) SetRoomVersion7() {
	capnp.Struct(s).SetUint16(16, 6)
}

func (s Transaction_PDU_roomVersion7) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion7) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion7) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion7) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion7) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion7) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion7) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion7) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion7) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion7) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion7) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion7) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion7) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion7) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion7) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion7) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion7) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion7) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion7) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion7) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion7) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion7) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion7) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion7) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion7) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion7) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion7) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion7) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion7) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion7) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion7) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion7) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion7) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion7) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion7) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion7) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion7) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion7) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion7) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion7) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion7) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion7) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion7) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion7) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion7) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion7) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion8() Transaction_PDU_roomVersion8 {
	return Transaction_PDU_roomVersion8(s)
}

func (s Transaction_PDU) SetRoomVersion8() {
	capnp.Struct(s).SetUint16(16, 7)
}

func (s Transaction_PDU_roomVersion8) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion8) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion8) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion8) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion8) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion8) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion8) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion8) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion8) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion8) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion8) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion8) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion8) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion8) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion8) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion8) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion8) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion8) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion8) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion8) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion8) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion8) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion8) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion8) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion8) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion8) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion8) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion8) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion8) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion8) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion8) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion8) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion8) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion8) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion8) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion8) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion8) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion8) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion8) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion8) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion8) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion8) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion8) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion8) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion8) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion8) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion9() Transaction_PDU_roomVersion9 {
	return Transaction_PDU_roomVersion9(s)
}

func (s Transaction_PDU) SetRoomVersion9() {
	capnp.Struct(s).SetUint16(16, 8)
}

func (s Transaction_PDU_roomVersion9) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion9) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion9) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion9) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion9) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion9) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion9) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion9) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion9) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion9) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion9) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion9) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion9) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion9) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion9) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion9) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion9) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion9) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion9) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion9) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion9) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion9) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion9) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion9) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion9) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion9) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion9) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion9) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion9) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion9) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion9) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion9) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion9) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion9) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion9) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion9) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion9) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion9) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion9) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion9) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion9) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion9) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion9) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion9) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion9) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion9) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion10() Transaction_PDU_roomVersion10 {
	return Transaction_PDU_roomVersion10(s)
}

func (s Transaction_PDU) SetRoomVersion10() {
	capnp.Struct(s).SetUint16(16, 9)
}

func (s Transaction_PDU_roomVersion10) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion10) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion10) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion10) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion10) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion10) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion10) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion10) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion10) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion10) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion10) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion10) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion10) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion10) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion10) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion10) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion10) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion10) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion10) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion10) Redacts() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion10) HasRedacts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion10) RedactsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion10) SetRedacts(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion10) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion10) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion10) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion10) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Transaction_PDU_roomVersion10) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion10) HasContent() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion10) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion10) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion10) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion10) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion10) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion10) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion10) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion10) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion10) HasHashes() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion10) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion10) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion10) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion10) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion10) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion10) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s Transaction_PDU_roomVersion10) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion10) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU) RoomVersion11() Transaction_PDU_roomVersion11 {
	return Transaction_PDU_roomVersion11(s)
}

func (s Transaction_PDU) SetRoomVersion11() {
	capnp.Struct(s).SetUint16(16, 10)
}

func (s Transaction_PDU_roomVersion11) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_roomVersion11) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_roomVersion11) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_roomVersion11) Depth() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_roomVersion11) SetDepth(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Transaction_PDU_roomVersion11) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Transaction_PDU_roomVersion11) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Transaction_PDU_roomVersion11) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion11) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_roomVersion11) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion11) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_roomVersion11) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion11) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Transaction_PDU_roomVersion11) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion11) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Transaction_PDU_roomVersion11) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion11) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Transaction_PDU_roomVersion11) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion11) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Transaction_PDU_roomVersion11) StateKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Transaction_PDU_roomVersion11) HasStateKey() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Transaction_PDU_roomVersion11) StateKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Transaction_PDU_roomVersion11) SetStateKey(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Transaction_PDU_roomVersion11) Content() (JsonValue, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return JsonValue(p.Struct()), err
}

func (s Transaction_PDU_roomVersion11) HasContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Transaction_PDU_roomVersion11) SetContent(v JsonValue) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated JsonValue struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewContent() (JsonValue, error) {
	ss, err := NewJsonValue(capnp.Struct(s).Segment())
	if err != nil {
		return JsonValue{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Transaction_PDU_roomVersion11) AuthEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion11) HasAuthEvents() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Transaction_PDU_roomVersion11) SetAuthEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAuthEvents sets the authEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewAuthEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion11) PrevEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion11) HasPrevEvents() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Transaction_PDU_roomVersion11) SetPrevEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPrevEvents sets the prevEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewPrevEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion11) Hashes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.TextList(p.List()), err
}

func (s Transaction_PDU_roomVersion11) HasHashes() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Transaction_PDU_roomVersion11) SetHashes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewHashes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion11) Signatures() (Signature_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return Signature_List(p.List()), err
}

func (s Transaction_PDU_roomVersion11) HasSignatures() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Transaction_PDU_roomVersion11) SetSignatures(v Signature_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s Transaction_PDU_roomVersion11) Unsigned() (Transaction_PDU_Unsigned, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return Transaction_PDU_Unsigned(p.Struct()), err
}

func (s Transaction_PDU_roomVersion11) HasUnsigned() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s Transaction_PDU_roomVersion11) SetUnsigned(v Transaction_PDU_Unsigned) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewUnsigned sets the unsigned field to a newly
// allocated Transaction_PDU_Unsigned struct, preferring placement in s's segment.
func (s Transaction_PDU_roomVersion11) NewUnsigned() (Transaction_PDU_Unsigned, error) {
	ss, err := NewTransaction_PDU_Unsigned(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU_Unsigned{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Transaction_PDU_List is a list of Transaction_PDU.
type Transaction_PDU_List = capnp.StructList[Transaction_PDU]

// NewTransaction_PDU creates a new list of Transaction_PDU.
func NewTransaction_PDU_List(s *capnp.Segment, sz int32) (Transaction_PDU_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 12}, sz)
	return capnp.StructList[Transaction_PDU](l), err
}

// Transaction_PDU_Future is a wrapper for a Transaction_PDU promised by a client call.
type Transaction_PDU_Future struct{ *capnp.Future }

func (f Transaction_PDU_Future) Struct() (Transaction_PDU, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU(p.Struct()), err
}
func (p Transaction_PDU_Future) RoomVersion1() Transaction_PDU_roomVersion1_Future {
	return Transaction_PDU_roomVersion1_Future{p.Future}
}

// Transaction_PDU_roomVersion1_Future is a wrapper for a Transaction_PDU_roomVersion1 promised by a client call.
type Transaction_PDU_roomVersion1_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion1_Future) Struct() (Transaction_PDU_roomVersion1, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion1(p.Struct()), err
}
func (p Transaction_PDU_roomVersion1_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(6, nil)}
}
func (p Transaction_PDU_roomVersion1_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(11, nil)}
}
func (p Transaction_PDU_Future) RoomVersion2() Transaction_PDU_roomVersion2_Future {
	return Transaction_PDU_roomVersion2_Future{p.Future}
}

// Transaction_PDU_roomVersion2_Future is a wrapper for a Transaction_PDU_roomVersion2 promised by a client call.
type Transaction_PDU_roomVersion2_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion2_Future) Struct() (Transaction_PDU_roomVersion2, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion2(p.Struct()), err
}
func (p Transaction_PDU_roomVersion2_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(6, nil)}
}
func (p Transaction_PDU_roomVersion2_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(11, nil)}
}
func (p Transaction_PDU_Future) RoomVersion3() Transaction_PDU_roomVersion3_Future {
	return Transaction_PDU_roomVersion3_Future{p.Future}
}

// Transaction_PDU_roomVersion3_Future is a wrapper for a Transaction_PDU_roomVersion3 promised by a client call.
type Transaction_PDU_roomVersion3_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion3_Future) Struct() (Transaction_PDU_roomVersion3, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion3(p.Struct()), err
}
func (p Transaction_PDU_roomVersion3_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion3_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion4() Transaction_PDU_roomVersion4_Future {
	return Transaction_PDU_roomVersion4_Future{p.Future}
}

// Transaction_PDU_roomVersion4_Future is a wrapper for a Transaction_PDU_roomVersion4 promised by a client call.
type Transaction_PDU_roomVersion4_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion4_Future) Struct() (Transaction_PDU_roomVersion4, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion4(p.Struct()), err
}
func (p Transaction_PDU_roomVersion4_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion4_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion5() Transaction_PDU_roomVersion5_Future {
	return Transaction_PDU_roomVersion5_Future{p.Future}
}

// Transaction_PDU_roomVersion5_Future is a wrapper for a Transaction_PDU_roomVersion5 promised by a client call.
type Transaction_PDU_roomVersion5_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion5_Future) Struct() (Transaction_PDU_roomVersion5, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion5(p.Struct()), err
}
func (p Transaction_PDU_roomVersion5_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion5_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion6() Transaction_PDU_roomVersion6_Future {
	return Transaction_PDU_roomVersion6_Future{p.Future}
}

// Transaction_PDU_roomVersion6_Future is a wrapper for a Transaction_PDU_roomVersion6 promised by a client call.
type Transaction_PDU_roomVersion6_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion6_Future) Struct() (Transaction_PDU_roomVersion6, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion6(p.Struct()), err
}
func (p Transaction_PDU_roomVersion6_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion6_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion7() Transaction_PDU_roomVersion7_Future {
	return Transaction_PDU_roomVersion7_Future{p.Future}
}

// Transaction_PDU_roomVersion7_Future is a wrapper for a Transaction_PDU_roomVersion7 promised by a client call.
type Transaction_PDU_roomVersion7_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion7_Future) Struct() (Transaction_PDU_roomVersion7, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion7(p.Struct()), err
}
func (p Transaction_PDU_roomVersion7_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion7_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion8() Transaction_PDU_roomVersion8_Future {
	return Transaction_PDU_roomVersion8_Future{p.Future}
}

// Transaction_PDU_roomVersion8_Future is a wrapper for a Transaction_PDU_roomVersion8 promised by a client call.
type Transaction_PDU_roomVersion8_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion8_Future) Struct() (Transaction_PDU_roomVersion8, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion8(p.Struct()), err
}
func (p Transaction_PDU_roomVersion8_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion8_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion9() Transaction_PDU_roomVersion9_Future {
	return Transaction_PDU_roomVersion9_Future{p.Future}
}

// Transaction_PDU_roomVersion9_Future is a wrapper for a Transaction_PDU_roomVersion9 promised by a client call.
type Transaction_PDU_roomVersion9_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion9_Future) Struct() (Transaction_PDU_roomVersion9, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion9(p.Struct()), err
}
func (p Transaction_PDU_roomVersion9_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion9_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion10() Transaction_PDU_roomVersion10_Future {
	return Transaction_PDU_roomVersion10_Future{p.Future}
}

// Transaction_PDU_roomVersion10_Future is a wrapper for a Transaction_PDU_roomVersion10 promised by a client call.
type Transaction_PDU_roomVersion10_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion10_Future) Struct() (Transaction_PDU_roomVersion10, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion10(p.Struct()), err
}
func (p Transaction_PDU_roomVersion10_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(5, nil)}
}
func (p Transaction_PDU_roomVersion10_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(10, nil)}
}
func (p Transaction_PDU_Future) RoomVersion11() Transaction_PDU_roomVersion11_Future {
	return Transaction_PDU_roomVersion11_Future{p.Future}
}

// Transaction_PDU_roomVersion11_Future is a wrapper for a Transaction_PDU_roomVersion11 promised by a client call.
type Transaction_PDU_roomVersion11_Future struct{ *capnp.Future }

func (f Transaction_PDU_roomVersion11_Future) Struct() (Transaction_PDU_roomVersion11, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_roomVersion11(p.Struct()), err
}
func (p Transaction_PDU_roomVersion11_Future) Content() JsonValue_Future {
	return JsonValue_Future{Future: p.Future.Field(4, nil)}
}
func (p Transaction_PDU_roomVersion11_Future) Unsigned() Transaction_PDU_Unsigned_Future {
	return Transaction_PDU_Unsigned_Future{Future: p.Future.Field(9, nil)}
}

type Transaction_PDU_EventReference capnp.Struct
type Transaction_PDU_EventReference_Which uint16

const (
	Transaction_PDU_EventReference_Which_eventID Transaction_PDU_EventReference_Which = 0
	Transaction_PDU_EventReference_Which_sha256  Transaction_PDU_EventReference_Which = 1
)

func (w Transaction_PDU_EventReference_Which) String() string {
	const s = "eventIDsha256"
	switch w {
	case Transaction_PDU_EventReference_Which_eventID:
		return s[0:7]
	case Transaction_PDU_EventReference_Which_sha256:
		return s[7:13]

	}
	return "Transaction_PDU_EventReference_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Transaction_PDU_EventReference_TypeID is the unique identifier for the type Transaction_PDU_EventReference.
const Transaction_PDU_EventReference_TypeID = 0xbb294824d9b4424b

func NewTransaction_PDU_EventReference(s *capnp.Segment) (Transaction_PDU_EventReference, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Transaction_PDU_EventReference(st), err
}

func NewRootTransaction_PDU_EventReference(s *capnp.Segment) (Transaction_PDU_EventReference, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Transaction_PDU_EventReference(st), err
}

func ReadRootTransaction_PDU_EventReference(msg *capnp.Message) (Transaction_PDU_EventReference, error) {
	root, err := msg.Root()
	return Transaction_PDU_EventReference(root.Struct()), err
}

func (s Transaction_PDU_EventReference) String() string {
	str, _ := text.Marshal(0xbb294824d9b4424b, capnp.Struct(s))
	return str
}

func (s Transaction_PDU_EventReference) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction_PDU_EventReference) DecodeFromPtr(p capnp.Ptr) Transaction_PDU_EventReference {
	return Transaction_PDU_EventReference(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction_PDU_EventReference) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Transaction_PDU_EventReference) Which() Transaction_PDU_EventReference_Which {
	return Transaction_PDU_EventReference_Which(capnp.Struct(s).Uint16(0))
}
func (s Transaction_PDU_EventReference) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_EventReference) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_EventReference) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_EventReference) EventID() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != eventID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_EventReference) HasEventID() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_EventReference) EventIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_EventReference) SetEventID(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction_PDU_EventReference) Sha256() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != sha256")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction_PDU_EventReference) HasSha256() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction_PDU_EventReference) Sha256Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction_PDU_EventReference) SetSha256(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

// Transaction_PDU_EventReference_List is a list of Transaction_PDU_EventReference.
type Transaction_PDU_EventReference_List = capnp.StructList[Transaction_PDU_EventReference]

// NewTransaction_PDU_EventReference creates a new list of Transaction_PDU_EventReference.
func NewTransaction_PDU_EventReference_List(s *capnp.Segment, sz int32) (Transaction_PDU_EventReference_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Transaction_PDU_EventReference](l), err
}

// Transaction_PDU_EventReference_Future is a wrapper for a Transaction_PDU_EventReference promised by a client call.
type Transaction_PDU_EventReference_Future struct{ *capnp.Future }

func (f Transaction_PDU_EventReference_Future) Struct() (Transaction_PDU_EventReference, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_EventReference(p.Struct()), err
}

type Transaction_PDU_Unsigned capnp.Struct

// Transaction_PDU_Unsigned_TypeID is the unique identifier for the type Transaction_PDU_Unsigned.
const Transaction_PDU_Unsigned_TypeID = 0x83ba1e25907bb64e

func NewTransaction_PDU_Unsigned(s *capnp.Segment) (Transaction_PDU_Unsigned, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Transaction_PDU_Unsigned(st), err
}

func NewRootTransaction_PDU_Unsigned(s *capnp.Segment) (Transaction_PDU_Unsigned, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Transaction_PDU_Unsigned(st), err
}

func ReadRootTransaction_PDU_Unsigned(msg *capnp.Message) (Transaction_PDU_Unsigned, error) {
	root, err := msg.Root()
	return Transaction_PDU_Unsigned(root.Struct()), err
}

func (s Transaction_PDU_Unsigned) String() string {
	str, _ := text.Marshal(0x83ba1e25907bb64e, capnp.Struct(s))
	return str
}

func (s Transaction_PDU_Unsigned) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction_PDU_Unsigned) DecodeFromPtr(p capnp.Ptr) Transaction_PDU_Unsigned {
	return Transaction_PDU_Unsigned(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction_PDU_Unsigned) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Transaction_PDU_Unsigned) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction_PDU_Unsigned) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction_PDU_Unsigned) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction_PDU_Unsigned) Age() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Transaction_PDU_Unsigned) SetAge(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Transaction_PDU_Unsigned_List is a list of Transaction_PDU_Unsigned.
type Transaction_PDU_Unsigned_List = capnp.StructList[Transaction_PDU_Unsigned]

// NewTransaction_PDU_Unsigned creates a new list of Transaction_PDU_Unsigned.
func NewTransaction_PDU_Unsigned_List(s *capnp.Segment, sz int32) (Transaction_PDU_Unsigned_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Transaction_PDU_Unsigned](l), err
}

// Transaction_PDU_Unsigned_Future is a wrapper for a Transaction_PDU_Unsigned promised by a client call.
type Transaction_PDU_Unsigned_Future struct{ *capnp.Future }

func (f Transaction_PDU_Unsigned_Future) Struct() (Transaction_PDU_Unsigned, error) {
	p, err := f.Future.Ptr()
	return Transaction_PDU_Unsigned(p.Struct()), err
}

type BackfillData capnp.Struct
type BackfillData_Which uint16

const (
	BackfillData_Which_metadata BackfillData_Which = 0
	BackfillData_Which_pdu      BackfillData_Which = 1
)

func (w BackfillData_Which) String() string {
	const s = "metadatapdu"
	switch w {
	case BackfillData_Which_metadata:
		return s[0:8]
	case BackfillData_Which_pdu:
		return s[8:11]

	}
	return "BackfillData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BackfillData_TypeID is the unique identifier for the type BackfillData.
const BackfillData_TypeID = 0xf2951513b06ace65

func NewBackfillData(s *capnp.Segment) (BackfillData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BackfillData(st), err
}

func NewRootBackfillData(s *capnp.Segment) (BackfillData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BackfillData(st), err
}

func ReadRootBackfillData(msg *capnp.Message) (BackfillData, error) {
	root, err := msg.Root()
	return BackfillData(root.Struct()), err
}

func (s BackfillData) String() string {
	str, _ := text.Marshal(0xf2951513b06ace65, capnp.Struct(s))
	return str
}

func (s BackfillData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BackfillData) DecodeFromPtr(p capnp.Ptr) BackfillData {
	return BackfillData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BackfillData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s BackfillData) Which() BackfillData_Which {
	return BackfillData_Which(capnp.Struct(s).Uint16(0))
}
func (s BackfillData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BackfillData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BackfillData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BackfillData) Metadata() (BackfillData_Metadata, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != metadata")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return BackfillData_Metadata(p.Struct()), err
}

func (s BackfillData) HasMetadata() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s BackfillData) SetMetadata(v BackfillData_Metadata) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated BackfillData_Metadata struct, preferring placement in s's segment.
func (s BackfillData) NewMetadata() (BackfillData_Metadata, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewBackfillData_Metadata(capnp.Struct(s).Segment())
	if err != nil {
		return BackfillData_Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BackfillData) Pdu() (Transaction_PDU, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != pdu")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Transaction_PDU(p.Struct()), err
}

func (s BackfillData) HasPdu() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s BackfillData) SetPdu(v Transaction_PDU) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPdu sets the pdu field to a newly
// allocated Transaction_PDU struct, preferring placement in s's segment.
func (s BackfillData) NewPdu() (Transaction_PDU, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTransaction_PDU(capnp.Struct(s).Segment())
	if err != nil {
		return Transaction_PDU{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// BackfillData_List is a list of BackfillData.
type BackfillData_List = capnp.StructList[BackfillData]

// NewBackfillData creates a new list of BackfillData.
func NewBackfillData_List(s *capnp.Segment, sz int32) (BackfillData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BackfillData](l), err
}

// BackfillData_Future is a wrapper for a BackfillData promised by a client call.
type BackfillData_Future struct{ *capnp.Future }

func (f BackfillData_Future) Struct() (BackfillData, error) {
	p, err := f.Future.Ptr()
	return BackfillData(p.Struct()), err
}
func (p BackfillData_Future) Metadata() BackfillData_Metadata_Future {
	return BackfillData_Metadata_Future{Future: p.Future.Field(0, nil)}
}
func (p BackfillData_Future) Pdu() Transaction_PDU_Future {
	return Transaction_PDU_Future{Future: p.Future.Field(0, nil)}
}

type BackfillData_Metadata capnp.Struct

// BackfillData_Metadata_TypeID is the unique identifier for the type BackfillData_Metadata.
const BackfillData_Metadata_TypeID = 0xe9224c8fac4d82c4

func NewBackfillData_Metadata(s *capnp.Segment) (BackfillData_Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BackfillData_Metadata(st), err
}

func NewRootBackfillData_Metadata(s *capnp.Segment) (BackfillData_Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BackfillData_Metadata(st), err
}

func ReadRootBackfillData_Metadata(msg *capnp.Message) (BackfillData_Metadata, error) {
	root, err := msg.Root()
	return BackfillData_Metadata(root.Struct()), err
}

func (s BackfillData_Metadata) String() string {
	str, _ := text.Marshal(0xe9224c8fac4d82c4, capnp.Struct(s))
	return str
}

func (s BackfillData_Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BackfillData_Metadata) DecodeFromPtr(p capnp.Ptr) BackfillData_Metadata {
	return BackfillData_Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BackfillData_Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BackfillData_Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BackfillData_Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BackfillData_Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BackfillData_Metadata) Origin() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BackfillData_Metadata) HasOrigin() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BackfillData_Metadata) OriginBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BackfillData_Metadata) SetOrigin(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s BackfillData_Metadata) OriginServerTS() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s BackfillData_Metadata) SetOriginServerTS(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// BackfillData_Metadata_List is a list of BackfillData_Metadata.
type BackfillData_Metadata_List = capnp.StructList[BackfillData_Metadata]

// NewBackfillData_Metadata creates a new list of BackfillData_Metadata.
func NewBackfillData_Metadata_List(s *capnp.Segment, sz int32) (BackfillData_Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BackfillData_Metadata](l), err
}

// BackfillData_Metadata_Future is a wrapper for a BackfillData_Metadata promised by a client call.
type BackfillData_Metadata_Future struct{ *capnp.Future }

func (f BackfillData_Metadata_Future) Struct() (BackfillData_Metadata, error) {
	p, err := f.Future.Ptr()
	return BackfillData_Metadata(p.Struct()), err
}

const schema_b8a1e7de8a3a89ec = "x\xda\xecZ\x7fpT\xd7u>\xe7\xbd]\xad\x16$" +
	"\xb4\x8f\xb7\x0eu0^#\x0b\x1b)FHZ\x09K" +
	"\x8a\xd3E\xb2D\xb0\x84\x1c=V\"F\x85\x84\x87\xf6" +
	"\x81\x16\xaf\xde\xaev\xdf\x0a\x96\xe0\xf0\xbb1\x0e\x04;" +
	"\xb1[Hp[\x18S\x93\x1f\x9e\x82'xh\x0d\x18" +
	"&\xd4\xb5;Ik\xa6a\x0am\x86\xc4m\x18C\x87" +
	"N\x9b\x0cv\x0b\x0dl\xe7\xdc\xdd\xf7\xde\xee\xb2\xb7\x80" +
	"\x81\xc43\xd5?\x9a\xb9\xdf\x1e\xddw\xee\xb9\xdf9\xdf" +
	"=\xf7\xbd\xba?\xf2\xccv\xd4\x97\xff\xf1D\x10\x94\xd3" +
	"\xce\x92\xf4\x93o|\xe5\xf9i\xf7\xff\xd5FPf!" +
	"\xa6\x8f\x96\xfc\xc3/\xe3\x07\x8f\x1e\x00\x87\x0b\xc0_\xef" +
	"\xbe\x82r\x8f\xdb\x05 ?\xe1\x0e\x00\xa6\x17\xfed\xe5" +
	"\x899\xb3\x0fo\x02\xe5!\xc4\xf4\xc5-\xad\xcf\x9d\xfd" +
	"`\xf7!\xe8\x14\\\"\x80?\xec\xfe&\xca\xeb\xdd\x8f" +
	"\x02\xc8{\xdd\x1f\x00\xa6wy\x07\xaa\xd5\xaf\xfez\x13" +
	"\xcd-\xdas\xdfS\xe6B\x00\xff\xfaq\x9f\x16\x00\xfd" +
	";\xc7\xfd\\\x00L\xb7<\x13|\xaf\xf1_\xe3[A" +
	"\xaa\xc3\xf476\xec;\xfb\x9d\xdf\xccy\x03\x9c\x02\xf9" +
	"\xf1~\xf9\xf7P\xbe\\N~|X\xbe\x120\xfdb" +
	"\xfd\xab+\x84\x17\x0f\xbfP\xdc\x0fm\xc2\xdf\xa2\xbc~" +
	"\xc2\xc3\x00\xf2\xcb\x13\xc8\x8f\xba]G\xab\x8e\xec\x08\xbd" +
	"\x04J\x0b\xe6\xfc\xb3\x13i\xf2\xa9\x9e\x06An\xf3\xd0" +
	"\xe4\x9f\xf3\xd0\xe4\x1f\x9d\xf8\x93K\xfbN\x9f\xdeY\xcc" +
	"\x93\x97=\xaf\xa3|\x90\x19\x1f`\xc6\x1d\x9f\x97G\x1c" +
	"\x07\xfe\xfe\xdb\xc5\x97X.\xb1%N\x93\xd8\x12\xab\xfe" +
	"\xf9[\xa7~\xf6\\\xcd\xae\xe2\xb6\xc3\xdeJ\xb2\xdd\xec" +
	"e\xb6\x81\x86\xda\x91\xb7\xd7\xf4\xfeiq\xdb\x9fLb" +
	"\xf3\x9e\x9b\xc4l\xbb[\xde2^\x1d\xb7}7H\x0d" +
	"9[\x94qx\xc6\xe4\xd7Q\xee\x9cL\x0e\xb7M&" +
	"\x87\xbf\xe4Xt\xa5\xef\xeb\x97\xf6\x15\x9f\xf8\xe5\xc9l" +
	"\xe2\x83\x93'\x89\x80i\xf9o\xde\xda\xfb\xad\xfbW~" +
	"\x0f\xa4\x87r\xa2\xecD\x97\x07\xfd-\xbe\xf9(\xf7\xf8" +
	"&\x01\xc8\xfd\xbe\x00\xc5\xc37\xe9\xadK\x83W:\xbe" +
	"y`\xbfT\x93\xf3\xbfN\x81\xcc_\xf3m@\xf9\xb8" +
	"\x8f\xfc8\xe2#?\xac'+\x0d(\xda^w\x96\xb9" +
	"\xc6c\xa9\xff\xde\x07^G\xb9\xfe\x81\x87\x01\xfc=\x0f" +
	"Di\x91\xd6F(\x0f\xa1\x90\xb3\xe5\xe8\xa2e\x1e\x99" +
	"\xba\x01\xe5\x93S\xc9\xfe\xdc\xd4\xedHAi\xff\xe1\x99" +
	"\xaa\xb9\xd5o\x16\xf0\xba\x13]\x02\x80\x7f\xdb\x835\x82" +
	"\xfc\xda\x83\xe4\xcew\x1f$w\xdaz/\x86\xba\x17\xbe" +
	"\xfdf\x01\xa3X\x1a8\xab\xf6\xa0<\xa5\x8a\x8c\xef\xad" +
	"\xa24x\xe7\xcf\xd3\xff6\xff\x80\xe3hA\\X\xc0" +
	"\xdb\xaa6\xa0\xdc\xcf\x8c\x95*\x9a\xf9\xa4\xd6\xbc\xa4g" +
	"\xe3\xa7~T<\xe0\x97\xabX\xc0\xa5il'\xbf\xd3" +
	"\xdd}\xf2\xfc\xa9Co\x17%\xea\xc2\xe9\x13\x0595" +
	"\x9dfNN\xa7\x99[&n?|\xd8\x88\xbdK!" +
	"\xbcn\xe3\xcfL\xff'\x94?d\xd6\xbf\x9a\xfe\x17\x80" +
	"\xe9G\xde\xef\x9e3\xfb\x17\xaf\xbc[\xdc\x8fm\xd5\xcc" +
	"\x8f\xbd\xd5l\xe3'W\xbc\xf9\x99\xcd\xbd_\xfcqq" +
	"\xdb\xea\x19\xcc\xb6m\x06\xf3y\xef\xa1\xb5\x1f\\\xfc\xd1" +
	"\x92\x7f,n\xbb\xa5\x8e\xd9\xee\xaec\xb6/\x1c8\xba" +
	"\xbdz\xe3\x9e3\x05Qv\x8a\xe4\xf1\x05\xffj\x94\xaf" +
	"\xfa\xc9\xe3\xcb~J\xdb7\xce\xee\xf9\xfeg\xcf\xf8\xcf" +
	"\x17\x0b\xf3\xb9\xc6=(_md\xc6\x8d\x14\x8c\x13\x1b" +
	"z~\xb0}^\xe5\x05P\xfc\x88i\xed\xefV\xec\x97" +
	"\xefy\xe9\xd7\xd9\xd0\xf57\xfd\x0b\xca#Md=\xdc" +
	"D\xd653\x17\x7f\xad\xef\xcb\xdf\xff\x0fNz5\xb1" +
	"T<\xd7\xf4*9m\xcdUPl2L\xfaU\xf3" +
	"\xb7Qv\xb7P\x1e\xdc\xd3BS\x9f\x1d\x12SgJ" +
	"\"\x1f\x15\x9f:\xd9\xc2\xe2\xb1\xad\xe5\xe7\x02\\K\xc7" +
	"\xe2Q#:s\x99V\x12\xd2\xe2\xaa\x11\x8e\xea3G" +
	"\xebg\x1a\xa9\x98\x96\xc8\xfc\xad\x1dTcz\xac\xb5/" +
	"\xae\xea\x09u\x90\x0cj{;\xfak\xfb\xf5@\"\xbc" +
	"\\\xd7B\xbd\x88\x8aCt\x008\x10@*\xaf\x04P" +
	"JET\xbc\x02\xba\xd4\xe5\x1a\xbaA@7\xa0\xf5\x18" +
	"\xe7\xcd>\x06u\xa5\x0cs\x08&I]9UF\xaa" +
	"\xb4\x97%\x95W\xa6{4C\x0d\xa9\x86\x0a\x00\xae\xce" +
	"\x8e~WoG\xbf\xe2\xb1\xbcR\xbb\x00\x94%\"*" +
	"\x11\x01\xa7`:\x8d^$8L\xf0\x90\x88\x8a!\xe0" +
	"\x14\xe1\x1a\xc1\x02\x804Bk\x88\x88\xa8\xac\x12p\x8a" +
	"x\x95`\x11@J\x12\x1c\x13QY#`ZM\x1a" +
	"C\x1d\x99\xe7\xa1\xc7\xe6\x14 z\x00\xd3\xc3\xb67\xe8" +
	"\xb1\x97\x90\xf9\xd5\xa5\x85\x92\xe8\xb1\xd7\x92Ec\x0c\xb5" +
	"\x16\x95\x9d\xc9\x0c\x9b\xeb\xd6v'\x1e\x8d\x0e/\xd0\xe2" +
	"\x89pT\xd4\x9b\x95F\x0a\x84\x17\x17\x03\xc8\x8b\xb1\x01" +
	" \xf8\x14\x8a\x18\x0c\xa1\x80\x12\xa2\x17\xbf\x04 \xab\xb8" +
	"\x1a \xb8\x84\xf0\x08\x0a\x88\x82\x17\xbf\x0c \x87\xb1\x15" +
	" \x18\"8F\xe6\"zq\x091\x98\xe1C\x84\x1b" +
	"\x84;\x04/\xaa\x00\xf2\x08\xd6\x00\x04#\x84\xaf\"\xdc" +
	")zq)\x15\x0bl\x07\x08\xc6\x08_Cx\x89\xc3" +
	"\x8b\x83\x00r\x0a\xbb\x00\x82\xab\x08\xdfD\xb8\xcb\xe9\xc5" +
	"\x10\x80\xbc\x9e\xd9\xaf!\xfcY\xc2KK\xbc\xa8\x01\xc8" +
	"\x9bq\x00 \xb8\x89\xf0?#\xdc\xed\xf2\xe22\xd2X" +
	"\x86\xef\"\xfc\x10\xe1\xe3J\xbd\xb8\x1c@>\xc8\xfc\xdc" +
	"O\xf8\x8f\x09\x1f\xef\xf6\xe2\x10\x80\xfc.\xb3\x7f\x87\xf0" +
	"_\x12^6\xce\x8ba\x00\xf9}\xe6\xcf/\x08\xbf\x88" +
	"\x02\xfaBZ\xcc\x18\xb28\x1c\x8d\x87\x97\x87\xf5\xa0\x06" +
	"\x81\xf8\xa8\x16\xef\x0b\xa2\x13\x04t\x02\x06(\xdcOt" +
	"`\x19\x08X\x06\x18HhzH\x8b\x9b\xc3\x0a\xda(" +
	"s\xb06\xae\x85\xd4A#a\x8e\xd3\x09C5\xb4n" +
	"-ET1m\x06\xa3\xba\xa1\xe9\x06zl\xc5\xc9\xd2" +
	"\x81h\xd79\xaa\xe9 \x1a\x09\x9c\x00\xd8+\"\xfb\xaf" +
	"\x09\x8c*\xda(\xe7\xb7\xc0\x90\x9a\x18\xd2\xae\xfb\x0fJ" +
	"`\xd5H\xc6A\xb4\x7f\xf3\xd8\xca\x02\xc8\xac\x92z&" +
	"\xd13d\xb6\xcej\x05\x04\xbdA^w%\xa2\xfa\x02" +
	"5\x92\xd4j+\x1eW#\x11*\x1a\xa5VzVS" +
	"\x1eN\x17Qi\xcc2\x92\xc0\xfaV\x00\xe5\x11\x11\x95" +
	"\xb9\x02\xa6\x97%uF\xee\x9c(\x05bj\\\x1d\xce" +
	"\xf1;7V\x13r<\xbbAa\x0bj\xb4\x99\xddZ" +
	"*1_K\xc4\xa2zB\xa3\x0a\x869B(\xb9\xbb" +
	"\xec\xe3\x9b\xe4^\x91[l\xd2_\x88\x84\x16h\xf1\xf0" +
	"2\xa8Huk\xa9\xdc\x9a3\x90\xad9k\xf2jN" +
	"\x8a\xd6\xbaJDeS^\xcdYO\xd6\xebDT~" +
	"\x9aWsN\xc6\x01\x94\xf7D\x0cV\xa1p\xb3\xfb\x95" +
	"_|\xacUd\xf7k\x94\x9cMuk \xa6\x12\xe8" +
	"\xb1\x8fH\x00\xb3QB\x9f\xe2\x100\x17\x94\xf0a\x0a" +
	"\x06\xdb.\xfa\xeb\xc9\xd2\xa7\x1c\x046]\xd4\\\xbe\x8f" +
	"\x96\x7f;3z\xec\x18\xdfZ\xed\xbb~\x03k\xb3\x9b" +
	"\xe2\xa3\x85\xa6\x0a\xb86\xdf\xe6\x9aE\xb5\xca,\xd5\x9a" +
	"\x05Lk\xabb\xe1\xb8\x16\xea\x03\xb4\xf2\xdb\xf5\xb4\x96" +
	"b+.\xff8\x84\xf7\xcd\x09k\x91P\x81\x175\x00" +
	"J\x95\x88J]\x0e\xe3g4\xd8\xaeU\xe8\xea\xb0U" +
	"4|\xa34Q\x91rp\x07\xd4\xc1o\xaa\xc3}\x1c" +
	"u\x98R\\\x1d\xee\xe7\xa8\x83\x8f\xa3\x0e\x0fp\xd4a" +
	"*G\x1d*9\xea\xf0 G\x1d\xaa8\xea0\x8d\xa3" +
	"\x0e\x0fq\xd4\xe1a\x8e:L\x1fS\x87\xdbP\x87\x8f" +
	"MP\x97^_g2t%\x87\xa1\xab\x8a34\xc5" +
	"a\xe8j\x0eC\xbf\xc2a\xe8\x1a\x0eC\x9f\xe10\xf4" +
	"\xab\x1c\x86\xae\xe50t\x1d\x87\xa1\xeb9\x0c\xdd\xc0a" +
	"\xe8\xc61\x86\xfe.\x18*\xea-&AWp\x08\xfa" +
	"tq\x82F8\x04\x1d\xe6\x10T\xe7\x104\xca!h" +
	"\x8cC\xd0\x11\x0eA\xe3\x1c\x82&8\x0458\x04M" +
	"r\x08::F\xd0\xbbw\xc0\xb6\x09\xea\xd3k;;" +
	"\xfa\x0b\xce\x1b\xed\xc5\xce\x1b\xed\xf6yc\xad\x16J\xf6" +
	"\xe5\x86\x91\x1f\xa2;\x901\xf5J\xb3\xe9\x9a\x9cb\x09" +
	"c\x10#\xd6\xa1u&\x93\x9fa\x04\xb5\x89+d\x0e" +
	"\xca\xf2z\x96G\xeb\x08\xdfj&\x8c\x08 oaD" +
	"d\xc4}\xdeL\x18\x07\x80\xbc\x8d\xe1\xcf\x12\xfe\xa2\x99" +
	"0N\x00\xf9\x05\x96H[\x09\xdfa&L\x09\x80\xfc" +
	"\x12{\xee\xf3\x84\xef2\x13\xc6\x05 \xefd\xc4\xddA" +
	"\xf8+f\xc2\x94\x02\xc8\xbb\x99=K\x8c}f\xc2\xb8" +
	"\x01\xe4\xbd,\x01^!\xfc\x98\x990\xe3\x00\xe4#\x0c" +
	"?L\xf8i3a\xc6\x03\xc8\xa7\x98\x9f\xef\x99\x89\xc1" +
	"\x12\xa6\x0c@\xbe\xc0\xec\xcf\x13\xee\x10\x04\x94\xca\xc7{" +
	"\xb1\x1c@F\xa1\x0b`\xbe b\xb0L(\xcc\xa3\xb5" +
	"\xda\xa8\xa6\x1bv\xbe|B\xf3\xcac_\x90Z-\xdb" +
	"\xf5\x19v\x9d\xd5o!\xd7\x1c\xff7\xb5{T\x8c)" +
	"\x0eD\xeb\xae\x19\x1b|\x9d\xba\x11O\xe5^\x84\xb5g" +
	"/\xc2\x9a)\xb9t#\x1e\xceq\xcb\xfc\xc7\xa2-\x12" +
	"\xd1\x9f,\xdbJQrVJ\xce\x06W\xb7\x96\xf2\xb1" +
	"^\xe2f\x8bA\x8f\x1a\xabe\x0eAA\x19\xa8\xbcA" +
	"\xdb\xc1:\x9d\x89\x98\xd7\xb0\xe1D\xab\x03\x99\xe8\xbc\xfe" +
	"\xa7\x8fU\xa0z;\xfaY\x8fmm\xad\xe4^m\xef" +
	"\x065\xdcD\x03c\xbe\xb6\x0c\x02Z\\\xd3\x07\xb5t" +
	"\xbf\xbds\xca#\xa2\xa3,\x9d\xc6\x9c7\x09\xf24\\" +
	"\x01B9^#\xd4\xbaf\x96%\x86\x0aW\x09\xb5^" +
	"\x93HW\x09\x14\x7fC\xa0us,] \xd0\xf1?" +
	"\x04ZW\xcf\xd2)\x02\x9dW\x08\xb4\xeeT\xa5\xe3\x04" +
	"\x96\\&\xd0\xbaX\x97^#\xd0\xf5\xdf\x04Z\xaf\x9c" +
	"\xa4\x9d\x04\x96\xfe\x17\x81\xd6\xcb\x14i3\x81\xee\x8f\x08" +
	"\xb4\xde\xc6H#q\x10\xca\xc7}H\xa0u/,-" +
	"\x8e\x83\x906\xeb&T\x84\xa3z}\xfe\xb0!\x7f\xe8" +
	"\xcf\x1f6\xe6\x0f\x9b\xf2\x87\xb3\xf2\x87\x8f\xe6\x0f\x9b\xf3" +
	"\x87-\xf6\xd0Gn\xd4\x15\x8c\xebo\xb9-\xce\xdc\xb1" +
	"\xd8\xef\xb9\xdc\x0d9\xaf\xdf\x9c5\x99\xa6\x99\xdd\x15)" +
	"\xf7\xb1\xddf\x04>H}\xf3~\x11\x95\xc3\x02N\xc1" +
	"kiO\x86\xc2\x7fI\xc9\xf6C\x11\x95c\x02N\x11" +
	"\xae\x9a\x97*GZ\x01\x94C\"*'\x04\xa4\xfd\xce" +
	"\xdc\xa9\x1c'\xf4\xb0\x88\xca;\x02\xd2\x863\x9d\x90\xfe" +
	"\x9a\xb2\xe0\x98\x88\xca\xcf\x04\xa4\x1dg*!\x9d!\xdb" +
	"\x9f\x8a\xa8\xfc\xa7\x80\xb4\xe5L#\xa4\x7f'/\xce\x8b" +
	"\xa8\\\xa2F=\x19\x89@\xc9\xda\xa5\xd1hDSu" +
	"D\x10\x10\x01\x03zrx\xa9\x16\xc7\xf1 \xe0x\xaa" +
	"\xacF<\xac/\xb7\x1az5\x1eWS\xdc\xab\xab@" +
	"t\xe9\x0am\xd0\xb0\x7f\xb7\xc2\x94\xf9\xbdbP\x8dD" +
	"\xd0c\x07\xec\xf6\x94\xd9L5-^A\x99\x96-\x19" +
	"f\xc8s\x8f\x0e\x94_\xd9\xa2\xd1\x9a{v\xc8\x97\x9b" +
	"@bHmh\x9ae)\xc5MRCIj\xf1\xd4" +
	"\xe3\xf1\xb0\xa1\xb9\xe2a\xb5\xe0\xb5\xc2\x1e\x00\xc5#\xa2" +
	"r\x9f\x80\xe9\xe1\xb0\x1e\x1eN\x0e/@5\x12\x0e\xf5" +
	"\xebF\xd8\x15\xb1%\xedf\x9f\x16\xcc\xca\x85VX\"" +
	"[\x8b\x95\xc8\x81\xec\x05\xd1:\x81D\x92D\xd4\xd6\xc1" +
	"\\\xdd\xb9\xfd\x0b\xb5;p\xbaz\xd4\xecGz9\xfd" +
	"\x88R\xbc\x1f\x99\xcf\xe9G\x82\x9c~\xa4\x8f\xd3\x8f\xf4" +
	"s\xfa\x91\x05\x9c~\xe4\x8b\x9c~\xe4)N?\xb2\x90" +
	"\xd3\x8f\x0cp\xfa\x91?\xe0\xf4#\x8b\xc6\xfa\x91\xbb\xd7" +
	"0\x17\xb9\x95\xcd^\x9b\xa3Z\x90q\x03EndW" +
	"\x00(u\"*\x8f\x09\x98\xce$\xdc\x93*\x88\xf6\x95" +
	"hz4\x9b\xfcP\x11.\x96\xfd\xb7\xf063\xe3\x96" +
	"h0\xb7\xca,\xb7:I\x10f\x8b\xa8\xcc\xcb)\x04" +
	"OPu\xe8\x10Q\xe9\xcd\xa4\x0c\xa9L\xcfj\x00e" +
	"\x9e\x88\xcaS\x02\xfa\x8cUz\x0e/2\xfc\xb9\xe11" +
	"\xfcN$}C\xa6\xa5\xf2\xe2\x84\xe2=U\x05\xa7\xa7" +
	"\xf2pz*\x89\xd3SM\xe4\xf4T2\xa7\xa7\xf2r" +
	"z\xaa{8=\xd5\xa78=\xd5$NO\xf5{\x9c" +
	"\x9e\xea^NO\xf5iNO5y\xac\xa7\xfa\xc4^" +
	"\xb05\x99\x826\x8b#h\x8f\x16\x17\xb4f\x8e\xa0\xb5" +
	"p\x04\xad\x95#h\x9f\xe5\x08\xdac\x1cA\xfb\x1cG" +
	"\xd0~\x9f#h\x01\x8e\xa0\xcd\xe6\x08Z\x1bG\xd0\xda" +
	"\xc7\x04\xedwC\xd0F\x93\xa0\xd5\x1c\x82\xd6\x14'\xe8" +
	"g8\x04}\x84C\xd0\x19\x1c\x82\xd6r\x08:\x93C" +
	"\xd0:\x0eA\xeb9\x04m\xe0\x10\xd4\xcf!h#\x87" +
	"\xa0Mc\x04\xbd{\xb7Rm\xc9@\xe6\x9b\xa4^\xd6" +
	"VX\xdf!\xd0\x91e\x91\x88\xca\x90}\xbc\xd2Z\xed" +
	"\xef\xa1\xcc\x9bU)\xbc\xd4\xfe\x1aJ\x12\x85L\xb3<" +
	"2\x90\xfd\xe8i\xab\x80\x81a\xcd\x18\x8a\x86\xcc\xbd*" +
	"<\xdd\x84\xb4\x84\x11\xd6U\x03\\\xe1\xa8^\xbc=\xe2" +
	"\x06\xe0f\x9b6v\x12\xa4\xac\xa3g\xdc\xcc+\xf5v" +
	"\xce+\xf5\xb5\xa3,u\xf5\xeb\x9a\xd4\x1b\x1c\x1c\xdb\xd5" +
	"\xc1\xa7\x97\x85#\x11\x8as\xe6\xe4\xe8\xcaF\xbcx\x0b" +
	"i9\xb2\xda\xfe\xc4\xe0\xb7w,t\xe9\xf5\xf5J]" +
	"\xa64m\x02\x90\xdbXiz\x8cro\xaeY\x9a6" +
	"\x03\xc8\x9d\xac4u\x10\xde\x9b-M\x7f\x08 \xf7\xb0" +
	"\xd4\x9eKp\x9fY\x9a\xbe\x06 +\x0c\x9fG\xf8S" +
	"fiz\x16@\xeeg\xa5\xa9\x97\xf0Efi\xda\x02" +
	" /d)oWD*M\xcf\xb1\x8aH%h\x11" +
	"\xe1Cfi\xfa:\x80\xac\xb1\xd2\x112\x8f\xaf\xac4" +
	"me\xe7\xd7\x01\xb3d\xed0K\xd36v\xbel5" +
	"\xcf\x97?0K\xd37\x00\xe4\xef2\xfb}\x84\x9f0" +
	"K\xd3v\x00\xf98\xf3\xe7\x98Y\xb2\xee|\x09\xfa\xff" +
	"\xf2\xd2\xc9\xce\x06\xd1P\x15\x07\xe6|\x02+aW\xee" +
	"wRy7J9\x9f{\xd97Jy\x1f\xe1\xe4\x7f" +
	"\xc3dMz\xb7?\x95\x9ce\xea\xf8\xe3\x1c\x1d\xef(" +
	"\xae\xe3\x9d\x1c\x1d\x9f\xc3\xd1\xf1\xcfst|.G\xc7" +
	"\x9f\xe0\xe8x\x17G\xc7\xbb9:>\x8f\xa3\xe3=\x1c" +
	"\x1d\x7f\x92\xa3\xe3_\x18\xd3\xf1[O\xaa\xff\x0d\x00\x00" +
	"\xff\xff\x8b\x9a]\xf6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b8a1e7de8a3a89ec,
		Nodes: []uint64{
			0x83ba1e25907bb64e,
			0x84bc4046c477cd59,
			0x84f27e61295a149c,
			0x8c72e334d0537d39,
			0x91bc94026aa73194,
			0x956498bd24be9c30,
			0x99d8d8a8f49ec4f6,
			0x9acfb10471134744,
			0x9c2a8adcd593db24,
			0x9f507cc6712e323f,
			0xa18f0aa774bf394b,
			0xa8f48b54fa5c045e,
			0xaa771e93a5bfc713,
			0xb000b19244fa63f4,
			0xb1beb572e4d306be,
			0xb646fc9bdea8828e,
			0xbb294824d9b4424b,
			0xbbc6594b64ec5041,
			0xbe04b152eaffa6c8,
			0xc316834d603865d1,
			0xc6b8d5e8d14b4b9b,
			0xc97074bcbc8f1239,
			0xc9a4e040464be12c,
			0xcc5750852bbb0f1b,
			0xd760c3ece77fb8a5,
			0xd9a283298fbeb191,
			0xe833d93baba2deb6,
			0xe9224c8fac4d82c4,
			0xefab5f54875d2f2a,
			0xf2951513b06ace65,
			0xf66c06d9790368de,
		},
		Compressed: true,
	})
}
