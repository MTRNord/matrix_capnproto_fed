// Code generated by capnpc-go. DO NOT EDIT.

package v1

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	types "github.com/MTRNord/matrix_protobuf_fed/proto/federation/v1/types"
)

const MethodUUID_ = uint64(0xe55590d1a37e8043)

type StreamCallback capnp.Client

// StreamCallback_TypeID is the unique identifier for the type StreamCallback.
const StreamCallback_TypeID = 0x819a8ee6024db3d2

func (c StreamCallback) Write(ctx context.Context, params func(StreamCallback_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      0,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamCallback_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c StreamCallback) Done(ctx context.Context, params func(StreamCallback_done_Params) error) (StreamCallback_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      1,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamCallback_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StreamCallback_done_Results_Future{Future: ans.Future()}, release

}

func (c StreamCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StreamCallback) String() string {
	return "StreamCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StreamCallback) AddRef() StreamCallback {
	return StreamCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StreamCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StreamCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StreamCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StreamCallback) DecodeFromPtr(p capnp.Ptr) StreamCallback {
	return StreamCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StreamCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StreamCallback) IsSame(other StreamCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StreamCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StreamCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StreamCallback_Server is a StreamCallback with a local implementation.
type StreamCallback_Server interface {
	Write(context.Context, StreamCallback_write) error

	Done(context.Context, StreamCallback_done) error
}

// StreamCallback_NewServer creates a new Server from an implementation of StreamCallback_Server.
func StreamCallback_NewServer(s StreamCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StreamCallback_Methods(nil, s), s, c)
}

// StreamCallback_ServerToClient creates a new Client from an implementation of StreamCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func StreamCallback_ServerToClient(s StreamCallback_Server) StreamCallback {
	return StreamCallback(capnp.NewClient(StreamCallback_NewServer(s)))
}

// StreamCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StreamCallback_Methods(methods []server.Method, s StreamCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      0,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, StreamCallback_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      1,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, StreamCallback_done{call})
		},
	})

	return methods
}

// StreamCallback_write holds the state for a server call to StreamCallback.write.
// See server.Call for documentation.
type StreamCallback_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamCallback_write) Args() StreamCallback_write_Params {
	return StreamCallback_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StreamCallback_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// StreamCallback_done holds the state for a server call to StreamCallback.done.
// See server.Call for documentation.
type StreamCallback_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamCallback_done) Args() StreamCallback_done_Params {
	return StreamCallback_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StreamCallback_done) AllocResults() (StreamCallback_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(r), err
}

// StreamCallback_List is a list of StreamCallback.
type StreamCallback_List = capnp.CapList[StreamCallback]

// NewStreamCallback creates a new list of StreamCallback.
func NewStreamCallback_List(s *capnp.Segment, sz int32) (StreamCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StreamCallback](l), err
}

type StreamCallback_write_Params capnp.Struct

// StreamCallback_write_Params_TypeID is the unique identifier for the type StreamCallback_write_Params.
const StreamCallback_write_Params_TypeID = 0xc99d5953442de820

func NewStreamCallback_write_Params(s *capnp.Segment) (StreamCallback_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamCallback_write_Params(st), err
}

func NewRootStreamCallback_write_Params(s *capnp.Segment) (StreamCallback_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamCallback_write_Params(st), err
}

func ReadRootStreamCallback_write_Params(msg *capnp.Message) (StreamCallback_write_Params, error) {
	root, err := msg.Root()
	return StreamCallback_write_Params(root.Struct()), err
}

func (s StreamCallback_write_Params) String() string {
	str, _ := text.Marshal(0xc99d5953442de820, capnp.Struct(s))
	return str
}

func (s StreamCallback_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_write_Params) DecodeFromPtr(p capnp.Ptr) StreamCallback_write_Params {
	return StreamCallback_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StreamCallback_write_Params) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s StreamCallback_write_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StreamCallback_write_Params) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// StreamCallback_write_Params_List is a list of StreamCallback_write_Params.
type StreamCallback_write_Params_List = capnp.StructList[StreamCallback_write_Params]

// NewStreamCallback_write_Params creates a new list of StreamCallback_write_Params.
func NewStreamCallback_write_Params_List(s *capnp.Segment, sz int32) (StreamCallback_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StreamCallback_write_Params](l), err
}

// StreamCallback_write_Params_Future is a wrapper for a StreamCallback_write_Params promised by a client call.
type StreamCallback_write_Params_Future struct{ *capnp.Future }

func (f StreamCallback_write_Params_Future) Struct() (StreamCallback_write_Params, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_write_Params(p.Struct()), err
}
func (p StreamCallback_write_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type StreamCallback_done_Params capnp.Struct

// StreamCallback_done_Params_TypeID is the unique identifier for the type StreamCallback_done_Params.
const StreamCallback_done_Params_TypeID = 0xfffa8c2e7b1978ac

func NewStreamCallback_done_Params(s *capnp.Segment) (StreamCallback_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Params(st), err
}

func NewRootStreamCallback_done_Params(s *capnp.Segment) (StreamCallback_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Params(st), err
}

func ReadRootStreamCallback_done_Params(msg *capnp.Message) (StreamCallback_done_Params, error) {
	root, err := msg.Root()
	return StreamCallback_done_Params(root.Struct()), err
}

func (s StreamCallback_done_Params) String() string {
	str, _ := text.Marshal(0xfffa8c2e7b1978ac, capnp.Struct(s))
	return str
}

func (s StreamCallback_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_done_Params) DecodeFromPtr(p capnp.Ptr) StreamCallback_done_Params {
	return StreamCallback_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StreamCallback_done_Params_List is a list of StreamCallback_done_Params.
type StreamCallback_done_Params_List = capnp.StructList[StreamCallback_done_Params]

// NewStreamCallback_done_Params creates a new list of StreamCallback_done_Params.
func NewStreamCallback_done_Params_List(s *capnp.Segment, sz int32) (StreamCallback_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StreamCallback_done_Params](l), err
}

// StreamCallback_done_Params_Future is a wrapper for a StreamCallback_done_Params promised by a client call.
type StreamCallback_done_Params_Future struct{ *capnp.Future }

func (f StreamCallback_done_Params_Future) Struct() (StreamCallback_done_Params, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_done_Params(p.Struct()), err
}

type StreamCallback_done_Results capnp.Struct

// StreamCallback_done_Results_TypeID is the unique identifier for the type StreamCallback_done_Results.
const StreamCallback_done_Results_TypeID = 0xd37bc71261c39851

func NewStreamCallback_done_Results(s *capnp.Segment) (StreamCallback_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(st), err
}

func NewRootStreamCallback_done_Results(s *capnp.Segment) (StreamCallback_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(st), err
}

func ReadRootStreamCallback_done_Results(msg *capnp.Message) (StreamCallback_done_Results, error) {
	root, err := msg.Root()
	return StreamCallback_done_Results(root.Struct()), err
}

func (s StreamCallback_done_Results) String() string {
	str, _ := text.Marshal(0xd37bc71261c39851, capnp.Struct(s))
	return str
}

func (s StreamCallback_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_done_Results) DecodeFromPtr(p capnp.Ptr) StreamCallback_done_Results {
	return StreamCallback_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StreamCallback_done_Results_List is a list of StreamCallback_done_Results.
type StreamCallback_done_Results_List = capnp.StructList[StreamCallback_done_Results]

// NewStreamCallback_done_Results creates a new list of StreamCallback_done_Results.
func NewStreamCallback_done_Results_List(s *capnp.Segment, sz int32) (StreamCallback_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StreamCallback_done_Results](l), err
}

// StreamCallback_done_Results_Future is a wrapper for a StreamCallback_done_Results promised by a client call.
type StreamCallback_done_Results_Future struct{ *capnp.Future }

func (f StreamCallback_done_Results_Future) Struct() (StreamCallback_done_Results, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_done_Results(p.Struct()), err
}

type MatrixFederation capnp.Client

// MatrixFederation_TypeID is the unique identifier for the type MatrixFederation.
const MatrixFederation_TypeID = 0xf730448b3b47991e

func (c MatrixFederation) GetVersion(ctx context.Context, params func(MatrixFederation_getVersion_Params) error) (MatrixFederation_getVersion_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      0,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getVersion",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_getVersion_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_getVersion_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) GetKeys(ctx context.Context, params func(MatrixFederation_getKeys_Params) error) (MatrixFederation_getKeys_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      1,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getKeys",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_getKeys_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_getKeys_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) SendTransactions(ctx context.Context, params func(MatrixFederation_sendTransactions_Params) error) (MatrixFederation_sendTransactions_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      2,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "sendTransactions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_sendTransactions_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_sendTransactions_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) Backfill(ctx context.Context, params func(MatrixFederation_backfill_Params) error) (MatrixFederation_backfill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      3,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "backfill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_backfill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_backfill_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c MatrixFederation) String() string {
	return "MatrixFederation(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c MatrixFederation) AddRef() MatrixFederation {
	return MatrixFederation(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c MatrixFederation) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c MatrixFederation) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c MatrixFederation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (MatrixFederation) DecodeFromPtr(p capnp.Ptr) MatrixFederation {
	return MatrixFederation(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c MatrixFederation) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c MatrixFederation) IsSame(other MatrixFederation) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c MatrixFederation) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c MatrixFederation) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A MatrixFederation_Server is a MatrixFederation with a local implementation.
type MatrixFederation_Server interface {
	GetVersion(context.Context, MatrixFederation_getVersion) error

	GetKeys(context.Context, MatrixFederation_getKeys) error

	SendTransactions(context.Context, MatrixFederation_sendTransactions) error

	Backfill(context.Context, MatrixFederation_backfill) error
}

// MatrixFederation_NewServer creates a new Server from an implementation of MatrixFederation_Server.
func MatrixFederation_NewServer(s MatrixFederation_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(MatrixFederation_Methods(nil, s), s, c)
}

// MatrixFederation_ServerToClient creates a new Client from an implementation of MatrixFederation_Server.
// The caller is responsible for calling Release on the returned Client.
func MatrixFederation_ServerToClient(s MatrixFederation_Server) MatrixFederation {
	return MatrixFederation(capnp.NewClient(MatrixFederation_NewServer(s)))
}

// MatrixFederation_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func MatrixFederation_Methods(methods []server.Method, s MatrixFederation_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      0,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getVersion",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetVersion(ctx, MatrixFederation_getVersion{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      1,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getKeys",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetKeys(ctx, MatrixFederation_getKeys{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      2,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "sendTransactions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendTransactions(ctx, MatrixFederation_sendTransactions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      3,
			InterfaceName: "proto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "backfill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Backfill(ctx, MatrixFederation_backfill{call})
		},
	})

	return methods
}

// MatrixFederation_getVersion holds the state for a server call to MatrixFederation.getVersion.
// See server.Call for documentation.
type MatrixFederation_getVersion struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_getVersion) Args() MatrixFederation_getVersion_Params {
	return MatrixFederation_getVersion_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_getVersion) AllocResults() (MatrixFederation_getVersion_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(r), err
}

// MatrixFederation_getKeys holds the state for a server call to MatrixFederation.getKeys.
// See server.Call for documentation.
type MatrixFederation_getKeys struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_getKeys) Args() MatrixFederation_getKeys_Params {
	return MatrixFederation_getKeys_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_getKeys) AllocResults() (MatrixFederation_getKeys_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(r), err
}

// MatrixFederation_sendTransactions holds the state for a server call to MatrixFederation.sendTransactions.
// See server.Call for documentation.
type MatrixFederation_sendTransactions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_sendTransactions) Args() MatrixFederation_sendTransactions_Params {
	return MatrixFederation_sendTransactions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_sendTransactions) AllocResults() (MatrixFederation_sendTransactions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(r), err
}

// MatrixFederation_backfill holds the state for a server call to MatrixFederation.backfill.
// See server.Call for documentation.
type MatrixFederation_backfill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_backfill) Args() MatrixFederation_backfill_Params {
	return MatrixFederation_backfill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_backfill) AllocResults() (MatrixFederation_backfill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(r), err
}

// MatrixFederation_List is a list of MatrixFederation.
type MatrixFederation_List = capnp.CapList[MatrixFederation]

// NewMatrixFederation creates a new list of MatrixFederation.
func NewMatrixFederation_List(s *capnp.Segment, sz int32) (MatrixFederation_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[MatrixFederation](l), err
}

type MatrixFederation_getVersion_Params capnp.Struct

// MatrixFederation_getVersion_Params_TypeID is the unique identifier for the type MatrixFederation_getVersion_Params.
const MatrixFederation_getVersion_Params_TypeID = 0xa6475494fcf1c9df

func NewMatrixFederation_getVersion_Params(s *capnp.Segment) (MatrixFederation_getVersion_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getVersion_Params(st), err
}

func NewRootMatrixFederation_getVersion_Params(s *capnp.Segment) (MatrixFederation_getVersion_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getVersion_Params(st), err
}

func ReadRootMatrixFederation_getVersion_Params(msg *capnp.Message) (MatrixFederation_getVersion_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_getVersion_Params(root.Struct()), err
}

func (s MatrixFederation_getVersion_Params) String() string {
	str, _ := text.Marshal(0xa6475494fcf1c9df, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getVersion_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getVersion_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getVersion_Params {
	return MatrixFederation_getVersion_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getVersion_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getVersion_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getVersion_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getVersion_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_getVersion_Params_List is a list of MatrixFederation_getVersion_Params.
type MatrixFederation_getVersion_Params_List = capnp.StructList[MatrixFederation_getVersion_Params]

// NewMatrixFederation_getVersion_Params creates a new list of MatrixFederation_getVersion_Params.
func NewMatrixFederation_getVersion_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_getVersion_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_getVersion_Params](l), err
}

// MatrixFederation_getVersion_Params_Future is a wrapper for a MatrixFederation_getVersion_Params promised by a client call.
type MatrixFederation_getVersion_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_getVersion_Params_Future) Struct() (MatrixFederation_getVersion_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getVersion_Params(p.Struct()), err
}

type MatrixFederation_getVersion_Results capnp.Struct

// MatrixFederation_getVersion_Results_TypeID is the unique identifier for the type MatrixFederation_getVersion_Results.
const MatrixFederation_getVersion_Results_TypeID = 0xf35f5ffe08536d82

func NewMatrixFederation_getVersion_Results(s *capnp.Segment) (MatrixFederation_getVersion_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(st), err
}

func NewRootMatrixFederation_getVersion_Results(s *capnp.Segment) (MatrixFederation_getVersion_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(st), err
}

func ReadRootMatrixFederation_getVersion_Results(msg *capnp.Message) (MatrixFederation_getVersion_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_getVersion_Results(root.Struct()), err
}

func (s MatrixFederation_getVersion_Results) String() string {
	str, _ := text.Marshal(0xf35f5ffe08536d82, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getVersion_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getVersion_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getVersion_Results {
	return MatrixFederation_getVersion_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getVersion_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getVersion_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getVersion_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getVersion_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_getVersion_Results) ServerVersion() (types.ServerVersion, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.ServerVersion(p.Struct()), err
}

func (s MatrixFederation_getVersion_Results) HasServerVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_getVersion_Results) SetServerVersion(v types.ServerVersion) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewServerVersion sets the serverVersion field to a newly
// allocated types.ServerVersion struct, preferring placement in s's segment.
func (s MatrixFederation_getVersion_Results) NewServerVersion() (types.ServerVersion, error) {
	ss, err := types.NewServerVersion(capnp.Struct(s).Segment())
	if err != nil {
		return types.ServerVersion{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MatrixFederation_getVersion_Results_List is a list of MatrixFederation_getVersion_Results.
type MatrixFederation_getVersion_Results_List = capnp.StructList[MatrixFederation_getVersion_Results]

// NewMatrixFederation_getVersion_Results creates a new list of MatrixFederation_getVersion_Results.
func NewMatrixFederation_getVersion_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_getVersion_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MatrixFederation_getVersion_Results](l), err
}

// MatrixFederation_getVersion_Results_Future is a wrapper for a MatrixFederation_getVersion_Results promised by a client call.
type MatrixFederation_getVersion_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_getVersion_Results_Future) Struct() (MatrixFederation_getVersion_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getVersion_Results(p.Struct()), err
}
func (p MatrixFederation_getVersion_Results_Future) ServerVersion() types.ServerVersion_Future {
	return types.ServerVersion_Future{Future: p.Future.Field(0, nil)}
}

type MatrixFederation_getKeys_Params capnp.Struct

// MatrixFederation_getKeys_Params_TypeID is the unique identifier for the type MatrixFederation_getKeys_Params.
const MatrixFederation_getKeys_Params_TypeID = 0x979c195cba352fad

func NewMatrixFederation_getKeys_Params(s *capnp.Segment) (MatrixFederation_getKeys_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MatrixFederation_getKeys_Params(st), err
}

func NewRootMatrixFederation_getKeys_Params(s *capnp.Segment) (MatrixFederation_getKeys_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MatrixFederation_getKeys_Params(st), err
}

func ReadRootMatrixFederation_getKeys_Params(msg *capnp.Message) (MatrixFederation_getKeys_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_getKeys_Params(root.Struct()), err
}

func (s MatrixFederation_getKeys_Params) String() string {
	str, _ := text.Marshal(0x979c195cba352fad, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getKeys_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getKeys_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getKeys_Params {
	return MatrixFederation_getKeys_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getKeys_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getKeys_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getKeys_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getKeys_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_getKeys_Params) Server_keys() (types.Map, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.Map(p.Struct()), err
}

func (s MatrixFederation_getKeys_Params) HasServer_keys() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_getKeys_Params) SetServer_keys(v types.Map) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewServer_keys sets the server_keys field to a newly
// allocated types.Map struct, preferring placement in s's segment.
func (s MatrixFederation_getKeys_Params) NewServer_keys() (types.Map, error) {
	ss, err := types.NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return types.Map{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MatrixFederation_getKeys_Params) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(1)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_getKeys_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MatrixFederation_getKeys_Params) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// MatrixFederation_getKeys_Params_List is a list of MatrixFederation_getKeys_Params.
type MatrixFederation_getKeys_Params_List = capnp.StructList[MatrixFederation_getKeys_Params]

// NewMatrixFederation_getKeys_Params creates a new list of MatrixFederation_getKeys_Params.
func NewMatrixFederation_getKeys_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_getKeys_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MatrixFederation_getKeys_Params](l), err
}

// MatrixFederation_getKeys_Params_Future is a wrapper for a MatrixFederation_getKeys_Params promised by a client call.
type MatrixFederation_getKeys_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_getKeys_Params_Future) Struct() (MatrixFederation_getKeys_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getKeys_Params(p.Struct()), err
}
func (p MatrixFederation_getKeys_Params_Future) Server_keys() types.Map_Future {
	return types.Map_Future{Future: p.Future.Field(0, nil)}
}
func (p MatrixFederation_getKeys_Params_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(1, nil).Client())
}

type MatrixFederation_getKeys_Results capnp.Struct

// MatrixFederation_getKeys_Results_TypeID is the unique identifier for the type MatrixFederation_getKeys_Results.
const MatrixFederation_getKeys_Results_TypeID = 0x902da9b8b1031221

func NewMatrixFederation_getKeys_Results(s *capnp.Segment) (MatrixFederation_getKeys_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(st), err
}

func NewRootMatrixFederation_getKeys_Results(s *capnp.Segment) (MatrixFederation_getKeys_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(st), err
}

func ReadRootMatrixFederation_getKeys_Results(msg *capnp.Message) (MatrixFederation_getKeys_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_getKeys_Results(root.Struct()), err
}

func (s MatrixFederation_getKeys_Results) String() string {
	str, _ := text.Marshal(0x902da9b8b1031221, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getKeys_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getKeys_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getKeys_Results {
	return MatrixFederation_getKeys_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getKeys_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getKeys_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getKeys_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getKeys_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_getKeys_Results_List is a list of MatrixFederation_getKeys_Results.
type MatrixFederation_getKeys_Results_List = capnp.StructList[MatrixFederation_getKeys_Results]

// NewMatrixFederation_getKeys_Results creates a new list of MatrixFederation_getKeys_Results.
func NewMatrixFederation_getKeys_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_getKeys_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_getKeys_Results](l), err
}

// MatrixFederation_getKeys_Results_Future is a wrapper for a MatrixFederation_getKeys_Results promised by a client call.
type MatrixFederation_getKeys_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_getKeys_Results_Future) Struct() (MatrixFederation_getKeys_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getKeys_Results(p.Struct()), err
}

type MatrixFederation_sendTransactions_Params capnp.Struct

// MatrixFederation_sendTransactions_Params_TypeID is the unique identifier for the type MatrixFederation_sendTransactions_Params.
const MatrixFederation_sendTransactions_Params_TypeID = 0xff6b4b94e55e5d73

func NewMatrixFederation_sendTransactions_Params(s *capnp.Segment) (MatrixFederation_sendTransactions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_sendTransactions_Params(st), err
}

func NewRootMatrixFederation_sendTransactions_Params(s *capnp.Segment) (MatrixFederation_sendTransactions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_sendTransactions_Params(st), err
}

func ReadRootMatrixFederation_sendTransactions_Params(msg *capnp.Message) (MatrixFederation_sendTransactions_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_sendTransactions_Params(root.Struct()), err
}

func (s MatrixFederation_sendTransactions_Params) String() string {
	str, _ := text.Marshal(0xff6b4b94e55e5d73, capnp.Struct(s))
	return str
}

func (s MatrixFederation_sendTransactions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_sendTransactions_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_sendTransactions_Params {
	return MatrixFederation_sendTransactions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_sendTransactions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_sendTransactions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_sendTransactions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_sendTransactions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_sendTransactions_Params_List is a list of MatrixFederation_sendTransactions_Params.
type MatrixFederation_sendTransactions_Params_List = capnp.StructList[MatrixFederation_sendTransactions_Params]

// NewMatrixFederation_sendTransactions_Params creates a new list of MatrixFederation_sendTransactions_Params.
func NewMatrixFederation_sendTransactions_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_sendTransactions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_sendTransactions_Params](l), err
}

// MatrixFederation_sendTransactions_Params_Future is a wrapper for a MatrixFederation_sendTransactions_Params promised by a client call.
type MatrixFederation_sendTransactions_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_sendTransactions_Params_Future) Struct() (MatrixFederation_sendTransactions_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_sendTransactions_Params(p.Struct()), err
}

type MatrixFederation_sendTransactions_Results capnp.Struct

// MatrixFederation_sendTransactions_Results_TypeID is the unique identifier for the type MatrixFederation_sendTransactions_Results.
const MatrixFederation_sendTransactions_Results_TypeID = 0x9622325dc507c361

func NewMatrixFederation_sendTransactions_Results(s *capnp.Segment) (MatrixFederation_sendTransactions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(st), err
}

func NewRootMatrixFederation_sendTransactions_Results(s *capnp.Segment) (MatrixFederation_sendTransactions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(st), err
}

func ReadRootMatrixFederation_sendTransactions_Results(msg *capnp.Message) (MatrixFederation_sendTransactions_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_sendTransactions_Results(root.Struct()), err
}

func (s MatrixFederation_sendTransactions_Results) String() string {
	str, _ := text.Marshal(0x9622325dc507c361, capnp.Struct(s))
	return str
}

func (s MatrixFederation_sendTransactions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_sendTransactions_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_sendTransactions_Results {
	return MatrixFederation_sendTransactions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_sendTransactions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_sendTransactions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_sendTransactions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_sendTransactions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_sendTransactions_Results) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_sendTransactions_Results) HasCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_sendTransactions_Results) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// MatrixFederation_sendTransactions_Results_List is a list of MatrixFederation_sendTransactions_Results.
type MatrixFederation_sendTransactions_Results_List = capnp.StructList[MatrixFederation_sendTransactions_Results]

// NewMatrixFederation_sendTransactions_Results creates a new list of MatrixFederation_sendTransactions_Results.
func NewMatrixFederation_sendTransactions_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_sendTransactions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MatrixFederation_sendTransactions_Results](l), err
}

// MatrixFederation_sendTransactions_Results_Future is a wrapper for a MatrixFederation_sendTransactions_Results promised by a client call.
type MatrixFederation_sendTransactions_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_sendTransactions_Results_Future) Struct() (MatrixFederation_sendTransactions_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_sendTransactions_Results(p.Struct()), err
}
func (p MatrixFederation_sendTransactions_Results_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(0, nil).Client())
}

type MatrixFederation_backfill_Params capnp.Struct

// MatrixFederation_backfill_Params_TypeID is the unique identifier for the type MatrixFederation_backfill_Params.
const MatrixFederation_backfill_Params_TypeID = 0xc423d46c6c56b237

func NewMatrixFederation_backfill_Params(s *capnp.Segment) (MatrixFederation_backfill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return MatrixFederation_backfill_Params(st), err
}

func NewRootMatrixFederation_backfill_Params(s *capnp.Segment) (MatrixFederation_backfill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return MatrixFederation_backfill_Params(st), err
}

func ReadRootMatrixFederation_backfill_Params(msg *capnp.Message) (MatrixFederation_backfill_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_backfill_Params(root.Struct()), err
}

func (s MatrixFederation_backfill_Params) String() string {
	str, _ := text.Marshal(0xc423d46c6c56b237, capnp.Struct(s))
	return str
}

func (s MatrixFederation_backfill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_backfill_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_backfill_Params {
	return MatrixFederation_backfill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_backfill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_backfill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_backfill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_backfill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_backfill_Params) Auth_data() (types.AuthData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.AuthData(p.Struct()), err
}

func (s MatrixFederation_backfill_Params) HasAuth_data() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_backfill_Params) SetAuth_data(v types.AuthData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth_data sets the auth_data field to a newly
// allocated types.AuthData struct, preferring placement in s's segment.
func (s MatrixFederation_backfill_Params) NewAuth_data() (types.AuthData, error) {
	ss, err := types.NewAuthData(capnp.Struct(s).Segment())
	if err != nil {
		return types.AuthData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MatrixFederation_backfill_Params) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s MatrixFederation_backfill_Params) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MatrixFederation_backfill_Params) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s MatrixFederation_backfill_Params) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s MatrixFederation_backfill_Params) Limit() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MatrixFederation_backfill_Params) SetLimit(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MatrixFederation_backfill_Params) EventIDs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s MatrixFederation_backfill_Params) HasEventIDs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MatrixFederation_backfill_Params) SetEventIDs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEventIDs sets the eventIDs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MatrixFederation_backfill_Params) NewEventIDs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s MatrixFederation_backfill_Params) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(3)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_backfill_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MatrixFederation_backfill_Params) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// MatrixFederation_backfill_Params_List is a list of MatrixFederation_backfill_Params.
type MatrixFederation_backfill_Params_List = capnp.StructList[MatrixFederation_backfill_Params]

// NewMatrixFederation_backfill_Params creates a new list of MatrixFederation_backfill_Params.
func NewMatrixFederation_backfill_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_backfill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[MatrixFederation_backfill_Params](l), err
}

// MatrixFederation_backfill_Params_Future is a wrapper for a MatrixFederation_backfill_Params promised by a client call.
type MatrixFederation_backfill_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_backfill_Params_Future) Struct() (MatrixFederation_backfill_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_backfill_Params(p.Struct()), err
}
func (p MatrixFederation_backfill_Params_Future) Auth_data() types.AuthData_Future {
	return types.AuthData_Future{Future: p.Future.Field(0, nil)}
}
func (p MatrixFederation_backfill_Params_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(3, nil).Client())
}

type MatrixFederation_backfill_Results capnp.Struct

// MatrixFederation_backfill_Results_TypeID is the unique identifier for the type MatrixFederation_backfill_Results.
const MatrixFederation_backfill_Results_TypeID = 0x8c1d77025e504f82

func NewMatrixFederation_backfill_Results(s *capnp.Segment) (MatrixFederation_backfill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(st), err
}

func NewRootMatrixFederation_backfill_Results(s *capnp.Segment) (MatrixFederation_backfill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(st), err
}

func ReadRootMatrixFederation_backfill_Results(msg *capnp.Message) (MatrixFederation_backfill_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_backfill_Results(root.Struct()), err
}

func (s MatrixFederation_backfill_Results) String() string {
	str, _ := text.Marshal(0x8c1d77025e504f82, capnp.Struct(s))
	return str
}

func (s MatrixFederation_backfill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_backfill_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_backfill_Results {
	return MatrixFederation_backfill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_backfill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_backfill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_backfill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_backfill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_backfill_Results_List is a list of MatrixFederation_backfill_Results.
type MatrixFederation_backfill_Results_List = capnp.StructList[MatrixFederation_backfill_Results]

// NewMatrixFederation_backfill_Results creates a new list of MatrixFederation_backfill_Results.
func NewMatrixFederation_backfill_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_backfill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_backfill_Results](l), err
}

// MatrixFederation_backfill_Results_Future is a wrapper for a MatrixFederation_backfill_Results promised by a client call.
type MatrixFederation_backfill_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_backfill_Results_Future) Struct() (MatrixFederation_backfill_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_backfill_Results(p.Struct()), err
}

const schema_ee8fadeb6a9300eb = "x\xda\xacVkl\x14U\x14>\xdf\xbdSf\x17v" +
	"\x97\xbd\xdd\x12\xc5DV\x91\xc4bl\xcb\xb21\x08\xfc" +
	"\xa0\x85\x02\xb6\x84\xb8\x97R\x12\x08\xd0\x0c\xed\x00K\xf7" +
	"\x01;\xd3\x16\x82(\"\x8d\x82\xe5Q) D~\x88" +
	"\xe2\x0bID\x12c\x10\x15\x02H0\xd1\xa4>\x121" +
	"\xf1\xc1\x0f\x0c\x09h\xa2\xfe0*2\xe6Nw\xb6[" +
	"\xb5\x11\xd2\xfe\xd9d\xe7;\xf7<\xbe\xef\xdes\xce\xa4" +
	"\xd9Z\xb5\x16\x0b\xee/%&\xbf*\x19\xe1|vb" +
	">\xfba\xe7\xc1'I\x94\xf3\xbf\xae\xedYs\xed\xd8" +
	"\xae\x9f\x88\xc2\x88\xc7\xfc'\x11\xa9\xf3\xebD\x91\xd9\xfe" +
	"\xa7#\xbd~=\xd2\xeb\x1f\xedly4\xb1\x9cu\xdc" +
	"\xddEb*\x884\x9d(~\xde\xbf\x80\x91\xe6\xdc[" +
	"\xca\x8f\xbf\xfbz\xc5\xee\"\xe4\x8c\xbf^!\xc6Y\xfd" +
	"\xfc\xb2\xc9\xe3\xf7\xf5!%P\xd0\xfb\xfe\xe7\x18!\xf2" +
	"\x8d\x7f\x06\xc19V\xf5\xd0\xc9\xa5c_\xd8\x9f7`" +
	"\xca 6r\xa62\xa8\x1b\xd9Ap\xbe\xbb\xf8\xf3\x8d" +
	"\x9e\x85s_)\xf2\x9d\x1e\xb5D\xf9\x9e\xf2\xf6\xa2T" +
	"\xea\x8b\xfb\xce\x91\x9c\x0au\xd6\xc5\x92\xa3\xea\x19!\xde" +
	"9*\x0a\x82s\xcf\xd5\x8a\xda\x86\xc5\x87.\x92\x98\xd2" +
	"\x17>\x8c\xf8\xe5\xc0x\xe5\xfd\xf7\x80\x0a/\x9f?k" +
	"\x94^\xd8\xf8y\x9f\x81\xa6\xf0\xb1\xc1\xf1\xca\xfb\xac\xcd" +
	"\x8f\xbf\xd4\xbb\xbb\xf1\x0au\x97\x97\xb0\x02=\x88\x8b\xe0" +
	"AD&\x06u\xa2\x86\x09A\xae\x82lI7\xf8n" +
	"65\xfdZ\\\xe3\x98\xe0\x0a\x15$\x16TA\xc6\x1d" +
	"\x98;\xfd\xd9\xdaI\xbf\x0d \x1a\xf1\xc6\xe0\xc7\x88\xac" +
	"\x0b\xba\x15\x05uD\x0e\x85t\"\xc7Z\xb6\xfcJ\xcf" +
	"\xbcV\xa7\xa8\xde\xce\xd0v\x95\xd1\x9b\xeb\xc7n\xac\xec" +
	"\xfa\xc3)\xca\xb53t\x17#\x87N9ksY;" +
	"[\xb5\xd2,i1s\x86\x9d\xccf\xaa\xdacU+" +
	"M\xef_e{\xac\xb2\xd9X\x9bY;\xad\xc1\xce\x99" +
	"Fz\x961#\x95Za4\xb7&\x00\xe9\xe3%D" +
	"\x05\xaa\x909~\xba#~\xb0\xe9\x80\x88M&\xaay" +
	"\x10Db\xaa\x0e\x14\xc2\xc3\xe3LT<@TS\x8e" +
	"\x9a\x87!\xea\xf4hG.i\x9b\x02Q\xa91\xf4\xdf" +
	"-\xa5L5F\xb7d3\xff\x8d\x0dr \x01\xd4h" +
	"\x10(\xc5\xc2Bm\xbe\xff\xabm\xbea\xe7\x92\xeb\xe7" +
	"\xf4#\xaa\xc2\x95\xc9Tj\xc2\x02\xd3jK\xd9\xb0\x86" +
	"\xe0k\x95i\xcf37XyW\x16Q\xc1\x97\xff\xb6" +
	"}Yf\xa6ea\xce\xc8XF\xb3\xfao\x15\xf2\x93" +
	"\x1a\xd7\x884\xc5K\xb0\x9eH\x068\xe4#\x0cN\xb3" +
	"\xd1'\x17\x11A\xf4s\xa5\x98\xfa\x17\x81\x8a\xd3;\xa4" +
	"\x06\x00\x09\x0e\x84\x9d\xc5\x9ft\x9c\x9bS}j+\x11" +
	" \x08\xc3\xc0A\xc2\xc8\x19i\x8b\xa4\xaf\x90\xed\xc4\x15" +
	"D\xb2\x9cC\x9ec\x10@\x99+\xed\x19U\xc2i\x0e" +
	"y\x83\xc1\xb1\xcc\\\xbb\x99kj%\xdd\xdc`!\xec" +
	"D.|xd\xcf\xb8\x8e7\x06\x14Q\xf4Q\xe0~" +
	"\xe9SEH\x1fW\xbfa\x0e\x04\x88\x0d\xe9dM\xe2" +
	"z\xcb\xbc\xc5\x1f\xbd\xa7\x98\x08\xd3\x10i\xed\x89\xbd\xba" +
	"\x86\xf5\x9c\xea\x1e\x16Z\x17\x999+\x99\xcd\xb8\xcc\xf2" +
	"\xb45\x1cw>/\x12\xc9\xb2\x82J\x9b\x16\x10\xc9\xc7" +
	"8\xe43E*uN#\x92\x9b9d\x17\x03X\x19" +
	"\x18\x91\xd86\x99Hn\xe5\x90\xbb\x19\x04ge\xe0D" +
	"b\x87\x92\xb3\x8bC\xbe\xc6 4^\x06\x8dH\x1cQ" +
	"\x1f_\xe6\x90\xdf38F\x9b\xbd\xba\xa9\xc5\xb0\x09\x06" +
	"\xc2N\xf7\xf1\x0fvM|\xea\xf0\xa5<\xdb3r\xd9" +
	"l\xba\xae\xd6\x95\"@\x88\xa6\x92\xe9\xa4\x0d\x1f1\xf8" +
	"\x08\x8e\xd9nf\xec\xbaZKI\x11\"\x97be\x18" +
	"\x1a\xaaJ\xe6\xa7k\xde\x8a\x8c\xd9\xfb\xcb?U\xd2o" +
	"\xb5Q\xf6\xc5\xaet\xbb\x9b\xe2T7\xd2\x03\x9e\xa9b" +
	"\xca\xc7!\xcb\x18\xa2\xedF\xaa\xcdD)\x06$\x84\xd2" +
	"!\x84U}\xd3\xed\x0ez\xca\xb6n\xbd\xcb\xa7M{" +
	"u\xb6\xa5\xb1\x91\xd7\xd5&\x00\xf8\x89\x0d\xcf\xf5\xf42" +
	")& \x97\xefSw\x16\x1e\xf9\"\x93\xa2\xae=\xc2" +
	"\xce;\xdf\x1e>:\xfdR\xfc\xaa\xf7\xe4\xbc4F\xdc" +
	"n\x1aD\x09\xf7-\xabY\xe5\xed\x04\xf0F\xafX\xb7" +
	"D\xb4E\x09b\x9b\x9aT\xdeN\x01o/\x11\x9bf" +
	"\x8aM\x0a\xee\xd6\xc1\x0a\x13\x16\xder\":\xb7\x8b\x1d" +
	"\x0a~Q\x07/\xac\x15\xf0\xf6\x1d\xb1\xb7^\x1cP\xf0" +
	"1\xdd\xf1\xb8 \x9e\xcdH\x0d\xac\x7fMP\xf7\xb0&" +
	"\x00\xf8\x9d\xde\xdax\xf4\xea\x89qG\x89P\x8d'\xf2" +
	"=s0\xe3\xd0\x97_\xef\x1b\xd3[\xb1\xc75v\xbc" +
	"\xc1\x00o2\x10\x0dr\xf0\xcf\xadKW]N\xb5^" +
	"w\x8fyo\x9e\x065w~\x0c\xec\xba\xb9cgh" +
	"\xbf\x1b'\x01\x0c\xe7\xf4\xf2:\xcd\xd0ny\xbe\xf5\xfd" +
	"\x1d\x00\x00\xff\xff\xb0\xce:\xf3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ee8fadeb6a9300eb,
		Nodes: []uint64{
			0x819a8ee6024db3d2,
			0x8c1d77025e504f82,
			0x902da9b8b1031221,
			0x9622325dc507c361,
			0x979c195cba352fad,
			0xa6475494fcf1c9df,
			0xc423d46c6c56b237,
			0xc99d5953442de820,
			0xd37bc71261c39851,
			0xe55590d1a37e8043,
			0xf35f5ffe08536d82,
			0xf730448b3b47991e,
			0xff6b4b94e55e5d73,
			0xfffa8c2e7b1978ac,
		},
		Compressed: true,
	})
}
